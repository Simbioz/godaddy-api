{
  "apiVersion": "2.4.9",
  "swaggerVersion": "1.2",
  "basePath": "https://api.godaddy.com",
  "resourcePath": "/v1/domains",
  "apis": [
    {
      "path": "/v1/domains/{domain}",
      "operations": [
        {
          "method": "PATCH",
          "nickname": "update",
          "type": "void",
          "summary": "Update details for the specified Domain",
          "parameters": [
            {
              "name": "domain",
              "required": true,
              "paramType": "path",
              "type": "string",
              "description": "Domain whose details are to be updated"
            },
            {
              "name": "X-Shopper-Id",
              "required": false,
              "paramType": "header",
              "type": "string",
              "description": "Shopper for whom Domain is to be updated. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you're a Reseller, but purchased a Domain via http://www.godaddy.com"
            },
            {
              "name": "body",
              "required": true,
              "paramType": "body",
              "type": "DomainUpdate",
              "description": "Changes to apply to existing Domain"
            }
          ],
          "responseMessages": [
            {
              "code": 200,
              "message": "Request was successful"
            },
            {
              "code": 400,
              "message": "Request was malformed",
              "responseModel": "Error"
            },
            {
              "code": 401,
              "message": "Authentication info not sent or invalid",
              "responseModel": "Error"
            },
            {
              "code": 403,
              "message": "Authenticated user is not allowed access",
              "responseModel": "Error"
            },
            {
              "code": 403,
              "message": "Specified Subaccount not owned by authenticated Shopper",
              "responseModel": "Error",
              "x-error-code": "INELIGIBLE_SUBACCOUNT"
            },
            {
              "code": 404,
              "message": "Resource not found",
              "responseModel": "Error",
              "x-error-code": "NOT_FOUND"
            },
            {
              "code": 409,
              "message": "The domain was not purchased with a subaccount",
              "responseModel": "Error",
              "x-error-code": "INELIGIBLE_DOMAIN"
            },
            {
              "code": 409,
              "message": "The given domain is not eligible to have its nameservers changed",
              "responseModel": "Error",
              "x-error-code": "INACTIVE_DOMAIN"
            },
            {
              "code": 422,
              "message": "At least two apex (aka @) `nameServers` must be specified",
              "responseModel": "Error",
              "x-error-code": "MISSING_NAME_SERVER"
            },
            {
              "code": 422,
              "message": "Failed to update nameservers",
              "responseModel": "Error",
              "x-error-code": "NOT_FOUND_NAME_SERVER"
            },
            {
              "code": 429,
              "message": "Too many requests received within interval",
              "responseModel": "ErrorLimit"
            },
            {
              "code": 500,
              "message": "Internal server error",
              "responseModel": "Error"
            }
          ],
          "consumes": [
            "application/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
          ],
          "authorizations": {
            "sso_key": []
          }
        },
        {
          "method": "DELETE",
          "nickname": "cancel",
          "type": "void",
          "summary": "Cancel a purchased domain",
          "parameters": [
            {
              "name": "domain",
              "required": true,
              "paramType": "path",
              "type": "string",
              "description": "Domain to cancel"
            }
          ],
          "responseMessages": [
            {
              "code": 200,
              "message": "Request was successful"
            },
            {
              "code": 400,
              "message": "Request was malformed",
              "responseModel": "Error"
            },
            {
              "code": 401,
              "message": "Authentication info not sent or invalid",
              "responseModel": "Error"
            },
            {
              "code": 403,
              "message": "Authenticated user is not allowed access",
              "responseModel": "Error"
            },
            {
              "code": 404,
              "message": "The domain does not exist",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "Customer has purchased Domain Ownership Protection and the domain has expired",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "The domain status does not allow performing the operation",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "The domain was registered as part of a bundle that does not allow this operation",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "There is a registrar hold on the domain. Contact Domain Services to resolve the issue",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "Unknown domain error",
              "responseModel": "Error"
            },
            {
              "code": 429,
              "message": "Too many requests received within interval",
              "responseModel": "ErrorLimit"
            },
            {
              "code": 500,
              "message": "Internal server error",
              "responseModel": "Error"
            }
          ],
          "consumes": [
            "application/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
          ],
          "authorizations": {
            "sso_key": []
          }
        },
        {
          "method": "GET",
          "nickname": "get",
          "type": "DomainDetail",
          "summary": "Retrieve details for the specified Domain",
          "parameters": [
            {
              "name": "X-Shopper-Id",
              "required": false,
              "paramType": "header",
              "type": "string",
              "description": "Shopper ID expected to own the specified domain"
            },
            {
              "name": "domain",
              "required": true,
              "paramType": "path",
              "type": "string",
              "description": "Domain name whose details are to be retrieved"
            }
          ],
          "responseMessages": [
            {
              "code": 200,
              "message": "Request was successful",
              "responseModel": "DomainDetail"
            },
            {
              "code": 203,
              "message": "Request was partially successful, see verifications.status for further detail",
              "responseModel": "DomainDetail"
            },
            {
              "code": 400,
              "message": "Request was malformed",
              "responseModel": "Error"
            },
            {
              "code": 401,
              "message": "Authentication info not sent or invalid",
              "responseModel": "Error"
            },
            {
              "code": 403,
              "message": "Authenticated user is not allowed access",
              "responseModel": "Error"
            },
            {
              "code": 404,
              "message": "Resource not found",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "`domain` must be specified",
              "responseModel": "Error"
            },
            {
              "code": 429,
              "message": "Too many requests received within interval",
              "responseModel": "ErrorLimit"
            },
            {
              "code": 500,
              "message": "Internal server error",
              "responseModel": "Error"
            }
          ],
          "consumes": [
            "application/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
          ],
          "authorizations": {
            "sso_key": []
          }
        }
      ]
    },
    {
      "path": "/v1/domains/available",
      "operations": [
        {
          "method": "GET",
          "nickname": "available",
          "type": "DomainAvailableResponse",
          "summary": "Determine whether or not the specified domain is available for purchase",
          "parameters": [
            {
              "name": "domain",
              "required": true,
              "paramType": "query",
              "type": "string",
              "description": "Domain name whose availability is to be checked"
            },
            {
              "name": "checkType",
              "required": false,
              "paramType": "query",
              "type": "string",
              "defaultValue": "FAST",
              "enum": [
                "FAST",
                "FULL",
                "fast",
                "full"
              ],
              "description": "Optimize for time ('FAST') or accuracy ('FULL')"
            },
            {
              "name": "forTransfer",
              "required": false,
              "paramType": "query",
              "type": "boolean",
              "defaultValue": "false",
              "description": "Whether or not to include domains available for transfer. If set to True, checkType is ignored"
            }
          ],
          "responseMessages": [
            {
              "code": 200,
              "message": "Request was successful",
              "responseModel": "DomainAvailableResponse"
            },
            {
              "code": 400,
              "message": "Request was malformed",
              "responseModel": "Error"
            },
            {
              "code": 401,
              "message": "Authentication info not sent or invalid",
              "responseModel": "Error"
            },
            {
              "code": 403,
              "message": "Authenticated user is not allowed access",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "responseModel": "Error",
              "x-error-code": "UNKNOWN_SYNTAX",
              "message": "Cannot convert domain label error"
            },
            {
              "code": 422,
              "message": "Domain is missing IDN script",
              "responseModel": "Error",
              "x-error-code": "MISSING_IDN_SCRIPT"
            },
            {
              "code": 422,
              "message": "Domain segment ends with dash",
              "responseModel": "Error",
              "x-error-code": "TRAILING_HYPHEN"
            },
            {
              "code": 422,
              "message": "Domain starts with dash",
              "responseModel": "Error",
              "x-error-code": "LEADING_HYPHEN"
            },
            {
              "code": 422,
              "message": "Domain uses unsupported IDN script",
              "responseModel": "Error",
              "x-error-code": "UNSUPPORTED_IDN_SCRIPT"
            },
            {
              "code": 422,
              "message": "FQDN fails generic validity regex",
              "responseModel": "Error",
              "x-error-code": "INVALID_CHARACTERS"
            },
            {
              "code": 422,
              "message": "Invalid character(s) error",
              "responseModel": "Error",
              "x-error-code": "INVALID_CHARACTERS"
            },
            {
              "code": 422,
              "message": "Invalid tld error",
              "responseModel": "Error",
              "x-error-code": "INVALID_TLD"
            },
            {
              "code": 422,
              "x-error-code": "INAPPROPRIATE_HYPHEN",
              "message": "Non-IDN domain name must not have dashes at the third and fourth position",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "x-error-code": "RESERVED_NAME",
              "message": "Reserved name error",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "domain must be specified",
              "responseModel": "Error",
              "x-error-code": "MISSING_VALUE"
            },
            {
              "code": 429,
              "message": "Too many requests received within interval",
              "responseModel": "ErrorLimit"
            },
            {
              "code": 500,
              "message": "Internal server error",
              "responseModel": "Error"
            }
          ],
          "consumes": [
            "application/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
          ],
          "authorizations": {
            "sso_key": []
          }
        },
        {
          "method": "POST",
          "nickname": "availableBulk",
          "type": "DomainAvailableBulk",
          "summary": "Determine whether or not the specified domains are available for purchase",
          "parameters": [
            {
              "name": "domains",
              "required": true,
              "paramType": "body",
              "type": "array",
              "items": {
                "type": "string"
              },
              "maximum": "500",
              "description": "Domain names for which to check availability"
            },
            {
              "name": "checkType",
              "required": false,
              "paramType": "query",
              "type": "string",
              "defaultValue": "FAST",
              "enum": [
                "FAST",
                "FULL",
                "fast",
                "full"
              ],
              "description": "Optimize for time ('FAST') or accuracy ('FULL')"
            }
          ],
          "responseMessages": [
            {
              "code": 200,
              "message": "Request was successful",
              "responseModel": "DomainAvailableBulk"
            },
            {
              "code": 203,
              "message": "Request was partially successful",
              "responseModel": "DomainAvailableBulkMixed"
            },
            {
              "code": 400,
              "message": "Request was malformed",
              "responseModel": "Error"
            },
            {
              "code": 401,
              "message": "Authentication info not sent or invalid",
              "responseModel": "Error"
            },
            {
              "code": 403,
              "message": "Authenticated user is not allowed access",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "responseModel": "Error",
              "x-error-code": "UNKNOWN_SYNTAX",
              "message": "Cannot convert domain label error"
            },
            {
              "code": 422,
              "message": "Domain is missing IDN script",
              "responseModel": "Error",
              "x-error-code": "MISSING_IDN_SCRIPT"
            },
            {
              "code": 422,
              "message": "Domain segment ends with dash",
              "responseModel": "Error",
              "x-error-code": "TRAILING_HYPHEN"
            },
            {
              "code": 422,
              "message": "Domain starts with dash",
              "responseModel": "Error",
              "x-error-code": "LEADING_HYPHEN"
            },
            {
              "code": 422,
              "message": "Domain uses unsupported IDN script",
              "responseModel": "Error",
              "x-error-code": "UNSUPPORTED_IDN_SCRIPT"
            },
            {
              "code": 422,
              "message": "FQDN fails generic validity regex",
              "responseModel": "Error",
              "x-error-code": "INVALID_CHARACTERS"
            },
            {
              "code": 422,
              "message": "Invalid character(s) error",
              "responseModel": "Error",
              "x-error-code": "INVALID_CHARACTERS"
            },
            {
              "code": 422,
              "message": "Invalid tld error",
              "responseModel": "Error",
              "x-error-code": "INVALID_TLD"
            },
            {
              "code": 422,
              "x-error-code": "INAPPROPRIATE_HYPHEN",
              "message": "Non-IDN domain name must not have dashes at the third and fourth position",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "x-error-code": "RESERVED_NAME",
              "message": "Reserved name error",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "domain must be specified",
              "responseModel": "Error",
              "x-error-code": "MISSING_VALUE"
            },
            {
              "code": 429,
              "message": "Too many requests received within interval",
              "responseModel": "ErrorLimit"
            },
            {
              "code": 500,
              "message": "Internal server error",
              "responseModel": "Error"
            }
          ],
          "consumes": [
            "application/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
          ],
          "authorizations": {
            "sso_key": []
          }
        }
      ]
    },
    {
      "path": "/v1/domains",
      "operations": [
        {
          "method": "GET",
          "nickname": "list",
          "type": "array",
          "items": {
            "type": "DomainSummary"
          },
          "summary": "Retrieve a list of Domains for the specified Shopper",
          "parameters": [
            {
              "name": "X-Shopper-Id",
              "required": false,
              "paramType": "header",
              "type": "string",
              "description": "Shopper ID whose domains are to be retrieved"
            },
            {
              "name": "statuses",
              "required": false,
              "paramType": "query",
              "type": "array",
              "items": {
                "enum": [
                  "ACTIVE",
                  "AWAITING_CLAIM_ACK",
                  "AWAITING_DOCUMENT_AFTER_TRANSFER",
                  "AWAITING_DOCUMENT_AFTER_UPDATE_ACCOUNT",
                  "AWAITING_DOCUMENT_UPLOAD",
                  "AWAITING_FAILED_TRANSFER_WHOIS_PRIVACY",
                  "AWAITING_PAYMENT",
                  "AWAITING_RENEWAL_TRANSFER_IN_COMPLETE",
                  "AWAITING_TRANSFER_IN_ACK",
                  "AWAITING_TRANSFER_IN_AUTH",
                  "AWAITING_TRANSFER_IN_AUTO",
                  "AWAITING_TRANSFER_IN_WHOIS",
                  "AWAITING_TRANSFER_IN_WHOIS_FIX",
                  "AWAITING_VERIFICATION_ICANN",
                  "AWAITING_VERIFICATION_ICANN_MANUAL",
                  "CANCELLED",
                  "CANCELLED_HELD",
                  "CANCELLED_REDEEMABLE",
                  "CANCELLED_TRANSFER",
                  "CONFISCATED",
                  "DISABLED_SPECIAL",
                  "EXCLUDED_INVALID_CLAIM_FIREHOSE",
                  "EXPIRED_REASSIGNED",
                  "FAILED_BACKORDER_CAPTURE",
                  "FAILED_DROP_IMMEDIATE_THEN_ADD",
                  "FAILED_PRE_REGISTRATION",
                  "FAILED_REDEMPTION",
                  "FAILED_REDEMPTION_REPORT",
                  "FAILED_REGISTRATION",
                  "FAILED_REGISTRATION_FIREHOSE",
                  "FAILED_RESTORATION_REDEMPTION_MOCK",
                  "FAILED_SETUP",
                  "FAILED_TRANSFER_IN",
                  "FAILED_TRANSFER_IN_BAD_STATUS",
                  "FAILED_TRANSFER_IN_REGISTRY",
                  "HELD_COURT_ORDERED",
                  "HELD_DISPUTED",
                  "HELD_EXPIRATION_PROTECTION",
                  "HELD_EXPIRED_REDEMPTION_MOCK",
                  "HELD_REGISTRAR_ADD",
                  "HELD_REGISTRAR_REMOVE",
                  "HELD_SHOPPER",
                  "HELD_TEMPORARY",
                  "LOCKED_ABUSE",
                  "LOCKED_COPYRIGHT",
                  "LOCKED_REGISTRY",
                  "LOCKED_SUPER",
                  "PARKED_AND_HELD",
                  "PARKED_EXPIRED",
                  "PARKED_VERIFICATION_ICANN",
                  "PENDING_ABORT_CANCEL_SETUP",
                  "PENDING_AGREEMENT_PRE_REGISTRATION",
                  "PENDING_APPLY_RENEWAL_CREDITS",
                  "PENDING_BACKORDER_CAPTURE",
                  "PENDING_BLOCKED_REGISTRY",
                  "PENDING_CANCEL_REGISTRANT_PROFILE",
                  "PENDING_COMPLETE_REDEMPTION_WITHOUT_RECEIPT",
                  "PENDING_COMPLETE_REGISTRANT_PROFILE",
                  "PENDING_COO",
                  "PENDING_COO_COMPLETE",
                  "PENDING_DNS",
                  "PENDING_DNS_ACTIVE",
                  "PENDING_DNS_INACTIVE",
                  "PENDING_DOCUMENT_VALIDATION",
                  "PENDING_DOCUMENT_VERIFICATION",
                  "PENDING_DROP_IMMEDIATE",
                  "PENDING_DROP_IMMEDIATE_THEN_ADD",
                  "PENDING_EPP_CREATE",
                  "PENDING_EPP_DELETE",
                  "PENDING_EPP_UPDATE",
                  "PENDING_ESCALATION_REGISTRY",
                  "PENDING_EXPIRATION",
                  "PENDING_EXPIRATION_RESPONSE",
                  "PENDING_EXPIRATION_SYNC",
                  "PENDING_EXPIRED_REASSIGNMENT",
                  "PENDING_EXPIRE_AUTO_ADD",
                  "PENDING_EXTEND_REGISTRANT_PROFILE",
                  "PENDING_FAILED_COO",
                  "PENDING_FAILED_EPP_CREATE",
                  "PENDING_FAILED_HELD",
                  "PENDING_FAILED_PURCHASE_PREMIUM",
                  "PENDING_FAILED_RECONCILE_FIREHOSE",
                  "PENDING_FAILED_REDEMPTION_WITHOUT_RECEIPT",
                  "PENDING_FAILED_RELEASE_PREMIUM",
                  "PENDING_FAILED_RENEW_EXPIRATION_PROTECTION",
                  "PENDING_FAILED_RESERVE_PREMIUM",
                  "PENDING_FAILED_SUBMIT_FIREHOSE",
                  "PENDING_FAILED_TRANSFER_ACK_PREMIUM",
                  "PENDING_FAILED_TRANSFER_IN_ACK_PREMIUM",
                  "PENDING_FAILED_TRANSFER_IN_PREMIUM",
                  "PENDING_FAILED_TRANSFER_PREMIUM",
                  "PENDING_FAILED_TRANSFER_SUBMIT_PREMIUM",
                  "PENDING_FAILED_UNLOCK_PREMIUM",
                  "PENDING_FAILED_UPDATE_API",
                  "PENDING_FRAUD_VERIFICATION",
                  "PENDING_FRAUD_VERIFIED",
                  "PENDING_GET_CONTACTS",
                  "PENDING_GET_HOSTS",
                  "PENDING_GET_NAME_SERVERS",
                  "PENDING_GET_STATUS",
                  "PENDING_HOLD_ESCROW",
                  "PENDING_HOLD_REDEMPTION",
                  "PENDING_LOCK_CLIENT_REMOVE",
                  "PENDING_LOCK_DATA_QUALITY",
                  "PENDING_LOCK_THEN_HOLD_REDEMPTION",
                  "PENDING_PARKING_DETERMINATION",
                  "PENDING_PARK_INVALID_WHOIS",
                  "PENDING_PARK_INVALID_WHOIS_REMOVAL",
                  "PENDING_PURCHASE_PREMIUM",
                  "PENDING_RECONCILE",
                  "PENDING_RECONCILE_FIREHOSE",
                  "PENDING_REDEMPTION",
                  "PENDING_REDEMPTION_REPORT",
                  "PENDING_REDEMPTION_REPORT_COMPLETE",
                  "PENDING_REDEMPTION_REPORT_SUBMITTED",
                  "PENDING_REDEMPTION_WITHOUT_RECEIPT",
                  "PENDING_REDEMPTION_WITHOUT_RECEIPT_MOCK",
                  "PENDING_RELEASE_PREMIUM",
                  "PENDING_REMOVAL",
                  "PENDING_REMOVAL_HELD",
                  "PENDING_REMOVAL_PARKED",
                  "PENDING_REMOVAL_UNPARK",
                  "PENDING_RENEWAL",
                  "PENDING_RENEW_EXPIRATION_PROTECTION",
                  "PENDING_RENEW_INFINITE",
                  "PENDING_RENEW_LOCKED",
                  "PENDING_RENEW_WITHOUT_RECEIPT",
                  "PENDING_REPORT_REDEMPTION_WITHOUT_RECEIPT",
                  "PENDING_RESERVE_PREMIUM",
                  "PENDING_RESET_VERIFICATION_ICANN",
                  "PENDING_RESPONSE_FIREHOSE",
                  "PENDING_RESTORATION",
                  "PENDING_RESTORATION_INACTIVE",
                  "PENDING_RESTORATION_REDEMPTION_MOCK",
                  "PENDING_RETRY_EPP_CREATE",
                  "PENDING_RETRY_HELD",
                  "PENDING_SEND_AUTH_CODE",
                  "PENDING_SETUP",
                  "PENDING_SETUP_ABANDON",
                  "PENDING_SETUP_AGREEMENT_LANDRUSH",
                  "PENDING_SETUP_AGREEMENT_SUNRISE2_A",
                  "PENDING_SETUP_AGREEMENT_SUNRISE2_B",
                  "PENDING_SETUP_AGREEMENT_SUNRISE2_C",
                  "PENDING_SETUP_AUTH",
                  "PENDING_SETUP_DNS",
                  "PENDING_SETUP_FAILED",
                  "PENDING_SETUP_REVIEW",
                  "PENDING_SETUP_SUNRISE",
                  "PENDING_SETUP_SUNRISE_PRE",
                  "PENDING_SETUP_SUNRISE_RESPONSE",
                  "PENDING_SUBMIT_FAILURE",
                  "PENDING_SUBMIT_FIREHOSE",
                  "PENDING_SUBMIT_HOLD_FIREHOSE",
                  "PENDING_SUBMIT_HOLD_LANDRUSH",
                  "PENDING_SUBMIT_HOLD_SUNRISE",
                  "PENDING_SUBMIT_LANDRUSH",
                  "PENDING_SUBMIT_RESPONSE_FIREHOSE",
                  "PENDING_SUBMIT_RESPONSE_LANDRUSH",
                  "PENDING_SUBMIT_RESPONSE_SUNRISE",
                  "PENDING_SUBMIT_SUCCESS_FIREHOSE",
                  "PENDING_SUBMIT_SUCCESS_LANDRUSH",
                  "PENDING_SUBMIT_SUCCESS_SUNRISE",
                  "PENDING_SUBMIT_SUNRISE",
                  "PENDING_SUBMIT_WAITING_LANDRUSH",
                  "PENDING_SUCCESS_PRE_REGISTRATION",
                  "PENDING_SUSPENDED_DATA_QUALITY",
                  "PENDING_TRANSFER_ACK_PREMIUM",
                  "PENDING_TRANSFER_IN",
                  "PENDING_TRANSFER_IN_ACK",
                  "PENDING_TRANSFER_IN_ACK_PREMIUM",
                  "PENDING_TRANSFER_IN_BAD_REGISTRANT",
                  "PENDING_TRANSFER_IN_CANCEL",
                  "PENDING_TRANSFER_IN_CANCEL_REGISTRY",
                  "PENDING_TRANSFER_IN_COMPLETE_ACK",
                  "PENDING_TRANSFER_IN_DELETE",
                  "PENDING_TRANSFER_IN_LOCK",
                  "PENDING_TRANSFER_IN_NACK",
                  "PENDING_TRANSFER_IN_NOTIFICATION",
                  "PENDING_TRANSFER_IN_PREMIUM",
                  "PENDING_TRANSFER_IN_RELEASE",
                  "PENDING_TRANSFER_IN_RESPONSE",
                  "PENDING_TRANSFER_IN_UNDERAGE",
                  "PENDING_TRANSFER_OUT",
                  "PENDING_TRANSFER_OUT_ACK",
                  "PENDING_TRANSFER_OUT_NACK",
                  "PENDING_TRANSFER_OUT_PREMIUM",
                  "PENDING_TRANSFER_OUT_UNDERAGE",
                  "PENDING_TRANSFER_OUT_VALIDATION",
                  "PENDING_TRANSFER_PREMIUM",
                  "PENDING_TRANSFER_PREMUIM",
                  "PENDING_TRANSFER_SUBMIT_PREMIUM",
                  "PENDING_UNLOCK_DATA_QUALITY",
                  "PENDING_UNLOCK_PREMIUM",
                  "PENDING_UPDATED_REGISTRANT_DATA_QUALITY",
                  "PENDING_UPDATE_ACCOUNT",
                  "PENDING_UPDATE_API",
                  "PENDING_UPDATE_API_RESPONSE",
                  "PENDING_UPDATE_AUTH",
                  "PENDING_UPDATE_CONTACTS",
                  "PENDING_UPDATE_CONTACTS_PRIVACY",
                  "PENDING_UPDATE_DNS",
                  "PENDING_UPDATE_DNS_SECURITY",
                  "PENDING_UPDATE_ELIGIBILITY",
                  "PENDING_UPDATE_EPP_CONTACTS",
                  "PENDING_UPDATE_MEMBERSHIP",
                  "PENDING_UPDATE_OWNERSHIP",
                  "PENDING_UPDATE_OWNERSHIP_AUTH_AUCTION",
                  "PENDING_UPDATE_OWNERSHIP_HELD",
                  "PENDING_UPDATE_REGISTRANT",
                  "PENDING_UPDATE_REPO",
                  "PENDING_VALIDATION_DATA_QUALITY",
                  "PENDING_VERIFICATION_FRAUD",
                  "PENDING_VERIFICATION_STATUS",
                  "PENDING_VERIFY_REGISTRANT_DATA_QUALITY",
                  "RESERVED",
                  "RESERVED_PREMIUM",
                  "REVERTED",
                  "SUSPENDED_VERIFICATION_ICANN",
                  "TRANSFERRED_OUT",
                  "UNLOCKED_ABUSE",
                  "UNLOCKED_SUPER",
                  "UNPARKED_AND_UNHELD",
                  "UPDATED_OWNERSHIP",
                  "UPDATED_OWNERSHIP_HELD"
                ],
                "type": "string"
              },
              "description": "Only include results with `status` value in the specified set"
            },
            {
              "name": "statusGroups",
              "required": false,
              "paramType": "query",
              "type": "array",
              "items": {
                "enum": [
                  "INACTIVE",
                  "PRE_REGISTRATION",
                  "REDEMPTION",
                  "RENEWABLE",
                  "VERIFICATION_ICANN",
                  "VISIBLE"
                ],
                "type": "string"
              },
              "description": "Only include results with `status` value in any of the specified groups"
            },
            {
              "name": "limit",
              "required": false,
              "paramType": "query",
              "type": "integer",
              "minimum": 1,
              "maximum": 1000,
              "description": "Maximum number of domains to return"
            },
            {
              "name": "marker",
              "required": false,
              "paramType": "query",
              "type": "string",
              "description": "Marker Domain to use as the offset in results"
            },
            {
              "name": "includes",
              "required": false,
              "paramType": "query",
              "type": "array",
              "items": {
                "enum": [
                  "authCode",
                  "contacts",
                  "nameServers"
                ],
                "type": "string"
              },
              "description": "Optional details to be included in the response"
            },
            {
              "name": "modifiedDate",
              "required": false,
              "paramType": "query",
              "type": "string",
              "format": "iso-datetime",
              "description": "Only include results that have been modified since the specified date"
            }
          ],
          "responseMessages": [
            {
              "code": 200,
              "message": "Request was successful",
              "responseModel": "[DomainSummary]"
            },
            {
              "code": 400,
              "message": "Request was malformed",
              "responseModel": "Error"
            },
            {
              "code": 401,
              "message": "Authentication info not sent or invalid",
              "responseModel": "Error"
            },
            {
              "code": 403,
              "message": "Authenticated user is not allowed access",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "Limit must have a value no greater than 1000",
              "responseModel": "Error",
              "x-error-code": "VALUE_OVER"
            },
            {
              "code": 429,
              "message": "Too many requests received within interval",
              "responseModel": "ErrorLimit"
            },
            {
              "code": 500,
              "message": "Internal server error",
              "responseModel": "Error"
            }
          ],
          "consumes": [
            "application/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
          ],
          "authorizations": {
            "sso_key": []
          }
        }
      ]
    },
    {
      "path": "/v1/domains/{domain}/privacy",
      "operations": [
        {
          "method": "DELETE",
          "nickname": "cancelPrivacy",
          "type": "void",
          "summary": "Submit a privacy cancellation request for the given domain",
          "parameters": [
            {
              "name": "X-Shopper-Id",
              "required": false,
              "paramType": "header",
              "type": "string",
              "description": "Shopper ID of the owner of the domain"
            },
            {
              "name": "domain",
              "required": true,
              "paramType": "path",
              "type": "string",
              "description": "Domain whose privacy is to be cancelled"
            }
          ],
          "responseMessages": [
            {
              "code": 200,
              "message": "Request was successful"
            },
            {
              "code": 400,
              "message": "Request was malformed",
              "responseModel": "Error"
            },
            {
              "code": 401,
              "message": "Authentication info not sent or invalid",
              "responseModel": "Error"
            },
            {
              "code": 403,
              "message": "Authenticated user is not allowed access",
              "responseModel": "Error"
            },
            {
              "code": 404,
              "message": "The domain does not exist",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "Customer has purchased Domain Ownership Protection and the domain has expired",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "The domain status does not allow performing the operation",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "The domain was registered as part of a bundle that does not allow this operation",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "Unknown domain error",
              "responseModel": "Error"
            },
            {
              "code": 429,
              "message": "Too many requests received within interval",
              "responseModel": "ErrorLimit"
            },
            {
              "code": 500,
              "message": "Internal server error",
              "responseModel": "Error"
            }
          ],
          "consumes": [
            "application/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
          ],
          "authorizations": {
            "sso_key": []
          }
        }
      ]
    },
    {
      "path": "/v1/domains/{domain}/verifyRegistrantEmail",
      "operations": [
        {
          "method": "POST",
          "nickname": "verifyEmail",
          "type": "void",
          "summary": "Re-send Contact E-mail Verification for specified Domain",
          "parameters": [
            {
              "name": "X-Shopper-Id",
              "required": false,
              "paramType": "header",
              "type": "string",
              "description": "Shopper for whom domain contact e-mail should be verified. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you're a Reseller, but purchased a Domain via http://www.godaddy.com"
            },
            {
              "name": "domain",
              "required": true,
              "paramType": "path",
              "type": "string",
              "description": "Domain whose Contact E-mail should be verified."
            }
          ],
          "responseMessages": [
            {
              "code": 200,
              "message": "Request was successful"
            },
            {
              "code": 400,
              "message": "Request was malformed",
              "responseModel": "Error"
            },
            {
              "code": 401,
              "message": "Authentication info not sent or invalid",
              "responseModel": "Error"
            },
            {
              "code": 403,
              "message": "Authenticated user is not allowed access",
              "responseModel": "Error"
            },
            {
              "code": 404,
              "message": "Resource not found",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "`domain` is not a valid Domain name",
              "responseModel": "Error"
            },
            {
              "code": 429,
              "message": "Too many requests received within interval",
              "responseModel": "ErrorLimit"
            },
            {
              "code": 500,
              "message": "Internal server error",
              "responseModel": "Error"
            },
            {
              "code": 504,
              "message": "Gateway timeout",
              "responseModel": "Error"
            }
          ],
          "consumes": [
            "application/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
          ],
          "authorizations": {
            "sso_key": []
          }
        }
      ]
    },
    {
      "path": "/v1/domains/tlds",
      "operations": [
        {
          "method": "GET",
          "nickname": "tlds",
          "type": "array",
          "items": {
            "type": "TldSummary"
          },
          "summary": "Retrieves a list of TLDs supported and enabled for sale",
          "parameters": [],
          "responseMessages": [
            {
              "code": 200,
              "message": "Request was successful",
              "responseModel": "[TldSummary]"
            },
            {
              "code": 400,
              "message": "Request was malformed",
              "responseModel": "Error"
            },
            {
              "code": 401,
              "message": "Authentication info not sent or invalid",
              "responseModel": "Error"
            },
            {
              "code": 403,
              "message": "Authenticated user is not allowed access",
              "responseModel": "Error"
            },
            {
              "code": 429,
              "message": "Too many requests received within interval",
              "responseModel": "ErrorLimit"
            },
            {
              "code": 500,
              "message": "Internal server error",
              "responseModel": "Error"
            }
          ],
          "consumes": [
            "application/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
          ],
          "authorizations": {
            "sso_key": []
          }
        }
      ]
    },
    {
      "path": "/v1/domains/purchase",
      "operations": [
        {
          "method": "POST",
          "nickname": "purchase",
          "type": "DomainPurchaseResponse",
          "summary": "Purchase and register the specified Domain",
          "parameters": [
            {
              "name": "X-Shopper-Id",
              "required": false,
              "paramType": "header",
              "type": "string",
              "description": "The Shopper for whom the domain should be purchased"
            },
            {
              "name": "body",
              "required": true,
              "paramType": "body",
              "type": "DomainPurchase",
              "description": "An instance document expected to match the JSON schema returned by `./schema/{tld}`"
            }
          ],
          "responseMessages": [
            {
              "code": 200,
              "message": "Request was successful",
              "responseModel": "DomainPurchaseResponse"
            },
            {
              "code": 400,
              "message": "Request was malformed",
              "responseModel": "Error"
            },
            {
              "code": 401,
              "message": "Authentication info not sent or invalid",
              "responseModel": "Error"
            },
            {
              "code": 403,
              "message": "Authenticated user is not allowed access",
              "responseModel": "Error"
            },
            {
              "code": 404,
              "message": "Resource not found",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "Based on restrictions declared in JSON schema returned by `./schema/{tld}`",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "responseModel": "Error",
              "x-error-code": "UNKNOWN_SYNTAX",
              "message": "Cannot convert domain label error"
            },
            {
              "code": 422,
              "message": "Domain is missing IDN script",
              "responseModel": "Error",
              "x-error-code": "MISSING_IDN_SCRIPT"
            },
            {
              "code": 422,
              "message": "Domain segment ends with dash",
              "responseModel": "Error",
              "x-error-code": "TRAILING_HYPHEN"
            },
            {
              "code": 422,
              "message": "Domain starts with dash",
              "responseModel": "Error",
              "x-error-code": "LEADING_HYPHEN"
            },
            {
              "code": 422,
              "message": "Domain uses unsupported IDN script",
              "responseModel": "Error",
              "x-error-code": "UNSUPPORTED_IDN_SCRIPT"
            },
            {
              "code": 422,
              "message": "FQDN fails generic validity regex",
              "responseModel": "Error",
              "x-error-code": "INVALID_CHARACTERS"
            },
            {
              "code": 422,
              "message": "Invalid character(s) error",
              "responseModel": "Error",
              "x-error-code": "INVALID_CHARACTERS"
            },
            {
              "code": 422,
              "message": "Invalid tld error",
              "responseModel": "Error",
              "x-error-code": "INVALID_TLD"
            },
            {
              "code": 422,
              "x-error-code": "INAPPROPRIATE_HYPHEN",
              "message": "Non-IDN domain name must not have dashes at the third and fourth position",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "x-error-code": "RESERVED_NAME",
              "message": "Reserved name error",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "`body` must be specified",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "domain must be specified",
              "responseModel": "Error",
              "x-error-code": "MISSING_VALUE"
            },
            {
              "code": 429,
              "message": "Too many requests received within interval",
              "responseModel": "ErrorLimit"
            },
            {
              "code": 500,
              "message": "Internal server error",
              "responseModel": "Error"
            }
          ],
          "consumes": [
            "application/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
          ],
          "authorizations": {
            "sso_key": []
          }
        }
      ]
    },
    {
      "path": "/v1/domains/{domain}/renew",
      "operations": [
        {
          "method": "POST",
          "nickname": "renew",
          "type": "DomainPurchaseResponse",
          "summary": "Renew the specified Domain",
          "parameters": [
            {
              "name": "X-Shopper-Id",
              "required": false,
              "paramType": "header",
              "type": "string",
              "description": "Shopper for whom Domain is to be renewed. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you're a Reseller, but purchased a Domain via http://www.godaddy.com"
            },
            {
              "name": "domain",
              "required": true,
              "paramType": "path",
              "type": "string",
              "description": "Domain to renew"
            },
            {
              "name": "body",
              "required": false,
              "paramType": "body",
              "type": "DomainRenew",
              "description": "Options for renewing existing Domain"
            }
          ],
          "responseMessages": [
            {
              "code": 200,
              "message": "Request was successful",
              "responseModel": "DomainPurchaseResponse"
            },
            {
              "code": 400,
              "message": "Request was malformed",
              "responseModel": "Error"
            },
            {
              "code": 401,
              "message": "Authentication info not sent or invalid",
              "responseModel": "Error"
            },
            {
              "code": 403,
              "message": "Authenticated user is not allowed access",
              "responseModel": "Error"
            },
            {
              "code": 404,
              "message": "Resource not found",
              "responseModel": "Error",
              "x-error-code": "NOT_FOUND"
            },
            {
              "code": 409,
              "message": "The domain status does not allow performing the operation",
              "responseModel": "Error",
              "x-error-code": "CONFLICTING_STATUS"
            },
            {
              "code": 422,
              "message": "End-user must read and consent to all of the following legal agreements",
              "responseModel": "Error",
              "x-error-code": "INVALID_AGREEMENT_KEYS"
            },
            {
              "code": 422,
              "message": "`domain` must match `sld.tld`",
              "responseModel": "Error",
              "x-error-code": "INVALID_DOMAIN"
            },
            {
              "code": 429,
              "message": "Too many requests received within interval",
              "responseModel": "ErrorLimit"
            },
            {
              "code": 500,
              "message": "Internal server error",
              "responseModel": "Error"
            }
          ],
          "consumes": [
            "application/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
          ],
          "authorizations": {
            "sso_key": []
          }
        }
      ]
    },
    {
      "path": "/v1/domains/purchase/schema/{tld}",
      "operations": [
        {
          "method": "GET",
          "nickname": "schema",
          "type": "JsonSchema",
          "summary": "Retrieve the schema to be submitted when registering a Domain for the specified TLD",
          "notes": "",
          "parameters": [
            {
              "name": "tld",
              "required": true,
              "paramType": "path",
              "type": "string",
              "description": "The Top-Level Domain whose schema should be retrieved"
            }
          ],
          "responseMessages": [
            {
              "code": 200,
              "message": "Request was successful",
              "responseModel": "JsonSchema"
            },
            {
              "code": 400,
              "message": "Request was malformed",
              "responseModel": "Error"
            },
            {
              "code": 401,
              "message": "Authentication info not sent or invalid",
              "responseModel": "Error"
            },
            {
              "code": 403,
              "message": "Authenticated user is not allowed access",
              "responseModel": "Error"
            },
            {
              "code": 404,
              "message": "Resource not found",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "`tld` must be specified",
              "responseModel": "Error"
            },
            {
              "code": 429,
              "message": "Too many requests received within interval",
              "responseModel": "ErrorLimit"
            },
            {
              "code": 500,
              "message": "Internal server error",
              "responseModel": "Error"
            }
          ],
          "consumes": [
            "application/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
          ],
          "authorizations": {
            "sso_key": []
          }
        }
      ]
    },
    {
      "path": "/v1/domains/purchase/validate",
      "operations": [
        {
          "method": "POST",
          "nickname": "validate",
          "type": "void",
          "summary": "Validate the request body using the Domain Purchase Schema for the specified TLD",
          "notes": "",
          "parameters": [
            {
              "name": "body",
              "required": true,
              "paramType": "body",
              "type": "DomainPurchase",
              "description": "An instance document expected to match the JSON schema returned by `./schema/{tld}`"
            }
          ],
          "responseMessages": [
            {
              "code": 200,
              "message": "Request was successful"
            },
            {
              "code": 400,
              "message": "Request was malformed",
              "responseModel": "Error"
            },
            {
              "code": 401,
              "message": "Authentication info not sent or invalid",
              "responseModel": "Error"
            },
            {
              "code": 403,
              "message": "Authenticated user is not allowed access",
              "responseModel": "Error"
            },
            {
              "code": 404,
              "message": "Resource not found",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "Based on restrictions declared in JSON schema returned by `./schema/{tld}`",
              "responseModel": "Error"
            },
            {
              "code": 429,
              "message": "Too many requests received within interval",
              "responseModel": "ErrorLimit"
            },
            {
              "code": 500,
              "message": "Internal server error",
              "responseModel": "Error"
            }
          ],
          "consumes": [
            "application/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
          ],
          "authorizations": {
            "sso_key": []
          }
        }
      ]
    },
    {
      "path": "/v1/domains/{domain}/transfer",
      "operations": [
        {
          "method": "POST",
          "nickname": "transferIn",
          "type": "DomainPurchaseResponse",
          "summary": "Purchase and start or restart transfer process",
          "parameters": [
            {
              "name": "X-Shopper-Id",
              "required": false,
              "paramType": "header",
              "type": "string",
              "description": "The Shopper to whom the domain should be transfered"
            },
            {
              "name": "domain",
              "required": true,
              "paramType": "path",
              "type": "string",
              "description": "Domain to transfer in"
            },
            {
              "name": "body",
              "required": true,
              "paramType": "body",
              "type": "DomainTransferIn",
              "description": "Details for domain transfer purchase"
            }
          ],
          "responseMessages": [
            {
              "code": 200,
              "message": "Request was successful",
              "responseModel": "DomainPurchaseResponse"
            },
            {
              "code": 400,
              "message": "Request was malformed",
              "responseModel": "Error"
            },
            {
              "code": 401,
              "message": "Authentication info not sent or invalid",
              "responseModel": "Error"
            },
            {
              "code": 403,
              "message": "Authenticated user is not allowed access",
              "responseModel": "Error"
            },
            {
              "code": 409,
              "message": "`domain` (domain) isn't available for transfer",
              "responseModel": "Error",
              "x-error-code": "UNAVAILABLE_DOMAIN"
            },
            {
              "code": 422,
              "message": "Based on restrictions declared in JSON schema returned by `./schema/{tld}`",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "responseModel": "Error",
              "x-error-code": "UNKNOWN_SYNTAX",
              "message": "Cannot convert domain label error"
            },
            {
              "code": 422,
              "message": "Domain is missing IDN script",
              "responseModel": "Error",
              "x-error-code": "MISSING_IDN_SCRIPT"
            },
            {
              "code": 422,
              "message": "Domain segment ends with dash",
              "responseModel": "Error",
              "x-error-code": "TRAILING_HYPHEN"
            },
            {
              "code": 422,
              "message": "Domain starts with dash",
              "responseModel": "Error",
              "x-error-code": "LEADING_HYPHEN"
            },
            {
              "code": 422,
              "message": "Domain uses unsupported IDN script",
              "responseModel": "Error",
              "x-error-code": "UNSUPPORTED_IDN_SCRIPT"
            },
            {
              "code": 422,
              "message": "End-user must read and consent to all of the following legal agreements",
              "responseModel": "Error",
              "x-error-code": "INVALID_AGREEMENT_KEYS"
            },
            {
              "code": 422,
              "message": "FQDN fails generic validity regex",
              "responseModel": "Error",
              "x-error-code": "INVALID_CHARACTERS"
            },
            {
              "code": 422,
              "message": "Invalid character(s) error",
              "responseModel": "Error",
              "x-error-code": "INVALID_CHARACTERS"
            },
            {
              "code": 422,
              "message": "Invalid period range",
              "responseModel": "Error",
              "x-error-code": "INVALID_PERIOD_RANGE"
            },
            {
              "code": 422,
              "message": "Invalid tld error",
              "responseModel": "Error",
              "x-error-code": "INVALID_TLD"
            },
            {
              "code": 422,
              "x-error-code": "INAPPROPRIATE_HYPHEN",
              "message": "Non-IDN domain name must not have dashes at the third and fourth position",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "x-error-code": "RESERVED_NAME",
              "message": "Reserved name error",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "`authCode` cannot be empty",
              "responseModel": "Error",
              "x-error-code": "INVALID_BODY"
            },
            {
              "code": 422,
              "message": "`domain` must match `sld.tld`",
              "responseModel": "Error",
              "x-error-code": "INVALID_DOMAIN"
            },
            {
              "code": 422,
              "message": "domain must be specified",
              "responseModel": "Error",
              "x-error-code": "MISSING_VALUE"
            },
            {
              "code": 429,
              "message": "Too many requests received within interval",
              "responseModel": "ErrorLimit"
            },
            {
              "code": 500,
              "message": "Internal server error",
              "responseModel": "Error"
            }
          ],
          "consumes": [
            "application/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
          ],
          "authorizations": {
            "sso_key": []
          }
        }
      ]
    },
    {
      "path": "/v1/domains/{domain}/privacy/purchase",
      "operations": [
        {
          "method": "POST",
          "nickname": "purchasePrivacy",
          "type": "DomainPurchaseResponse",
          "summary": "Purchase privacy for a specified domain",
          "parameters": [
            {
              "name": "X-Shopper-Id",
              "required": false,
              "paramType": "header",
              "type": "string",
              "description": "Shopper ID of the owner of the domain"
            },
            {
              "name": "domain",
              "required": true,
              "paramType": "path",
              "type": "string",
              "description": "Domain for which to purchase privacy"
            },
            {
              "name": "body",
              "required": true,
              "paramType": "body",
              "type": "PrivacyPurchase",
              "description": "Options for purchasing privacy"
            }
          ],
          "responseMessages": [
            {
              "code": 200,
              "message": "Request was successful",
              "responseModel": "DomainPurchaseResponse"
            },
            {
              "code": 400,
              "message": "Request was malformed",
              "responseModel": "Error"
            },
            {
              "code": 401,
              "message": "Authentication info not sent or invalid",
              "responseModel": "Error"
            },
            {
              "code": 403,
              "message": "Authenticated user is not allowed access",
              "responseModel": "Error"
            },
            {
              "code": 404,
              "message": "Resource not found",
              "responseModel": "Error",
              "x-error-code": "NOT_FOUND"
            },
            {
              "code": 409,
              "message": "The domain status does not allow performing the operation",
              "responseModel": "Error",
              "x-error-code": "CONFLICTING_STATUS"
            },
            {
              "code": 422,
              "message": "End-user must read and consent to all of the following legal agreements",
              "responseModel": "Error",
              "x-error-code": "INVALID_AGREEMENT_KEYS"
            },
            {
              "code": 422,
              "message": "`domain` must match `sld.tld`",
              "responseModel": "Error",
              "x-error-code": "INVALID_DOMAIN"
            },
            {
              "code": 429,
              "message": "Too many requests received within interval",
              "responseModel": "ErrorLimit"
            },
            {
              "code": 500,
              "message": "Internal server error",
              "responseModel": "Error"
            }
          ],
          "consumes": [
            "application/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
          ],
          "authorizations": {
            "sso_key": []
          }
        }
      ]
    },
    {
      "path": "/v1/domains/identityDocuments",
      "operations": [
        {
          "method": "POST",
          "nickname": "createIdentityDocument",
          "type": "IdentityDocumentId",
          "summary": "Create an Identity Document from uploaded image",
          "parameters": [
            {
              "name": "X-Shopper-Id",
              "required": false,
              "paramType": "header",
              "type": "string",
              "description": [
                "Shopper ID of the owner of the identity document. This is only required if you are a Reseller managing",
                "identity documents for your customers. Use this header to pass in their subaccount ID"
              ]
            },
            {
              "name": "identityDocument",
              "required": true,
              "paramType": "body",
              "type": "IdentityDocumentCreate",
              "description": "Identity document data"
            }
          ],
          "responseMessages": [
            {
              "code": 200,
              "message": "Request was successful",
              "responseModel": "IdentityDocumentId"
            },
            {
              "code": 400,
              "message": "Request was malformed",
              "responseModel": "Error"
            },
            {
              "code": 401,
              "message": "Authentication info not sent or invalid",
              "responseModel": "Error"
            },
            {
              "code": 403,
              "message": "Authenticated user is not allowed access",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "`identityDocument` does not fulfill the schema",
              "responseModel": "Error",
              "x-error-code": "INVALID_BODY"
            },
            {
              "code": 422,
              "message": "Invalid image format",
              "responseModel": "Error",
              "x-error-code": "INVALID_IMAGE_FORMAT"
            },
            {
              "code": 422,
              "message": "Invalid document type for specified country",
              "responseModel": "Error",
              "x-error-code": "INVALID_DOCUMENT_TYPE_FOR_COUNTRY"
            },
            {
              "code": 422,
              "message": "Invalid document type for contact. For individuals, choose from DRIVERS_LICENSE, RESIDENT_ID, RESIDENT_ID_TEMPORARY and PASSPORT. For corporations, choose from BUSINESS_LICENSE and ORGANIZATION_CODE_CERTIFICATE",
              "responseModel": "Error",
              "x-error-code": "INVALID_DOCUMENT_TYPE_FOR_CONTACT"
            },
            {
              "code": 429,
              "message": "Too many requests received within interval",
              "responseModel": "ErrorLimit"
            },
            {
              "code": 500,
              "message": "Internal server error",
              "responseModel": "Error"
            }
          ],
          "consumes": [
            "application/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
          ],
          "authorizations": {
            "sso_key": []
          }
        },
        {
          "method": "GET",
          "nickname": "listIdentityDocuments",
          "type": "array",
          "items": {
            "type": "IdentityDocumentSummary"
          },
          "summary": "Get a collection of identity documents the current shopper owns",
          "parameters": [
            {
              "name": "X-Shopper-Id",
              "required": false,
              "paramType": "header",
              "type": "string",
              "description": [
                "Shopper ID of the owner of the identity document. This is only required if you are a Reseller managing",
                "identity documents for your customers. Use this header to pass in their subaccount ID"
              ]
            }
          ],
          "responseMessages": [
            {
              "code": 200,
              "message": "Request was successful",
              "responseModel": "[IdentityDocumentSummary]"
            },
            {
              "code": 400,
              "message": "Request was malformed",
              "responseModel": "Error"
            },
            {
              "code": 401,
              "message": "Authentication info not sent or invalid",
              "responseModel": "Error"
            },
            {
              "code": 403,
              "message": "Authenticated user is not allowed access",
              "responseModel": "Error"
            },
            {
              "code": 429,
              "message": "Too many requests received within interval",
              "responseModel": "ErrorLimit"
            },
            {
              "code": 500,
              "message": "Internal server error",
              "responseModel": "Error"
            }
          ],
          "consumes": [
            "application/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
          ],
          "authorizations": {
            "sso_key": []
          }
        }
      ]
    },
    {
      "path": "/v1/domains/identityDocuments/{identityDocumentId}/verifications",
      "operations": [
        {
          "method": "POST",
          "nickname": "createVerification",
          "type": "array",
          "items": {
            "type": "IdentityDocumentVerification"
          },
          "summary": "Initiate verifications for the specified Domains",
          "notes": [
            "Only one verification job is needed for one TLD, Top Level Domain, per identity document.",
            "Sending in request(s) with multiple domains for the same TLD, will not create multiple verification",
            "jobs. We accept domain names for the convenience of our customers so that they don't need to",
            "worry about parsing TLDs out of domain names"
          ],
          "parameters": [
            {
              "name": "X-Shopper-Id",
              "required": false,
              "paramType": "header",
              "type": "string",
              "description": [
                "Shopper ID of the owner of the identity document. This is only required if you are a Reseller managing",
                "identity documents for your customers. Use this header to pass in their subaccount ID"
              ]
            },
            {
              "name": "identityDocumentId",
              "required": true,
              "paramType": "path",
              "type": "string",
              "description": "Unique id of an identity document"
            },
            {
              "name": "tlds",
              "required": true,
              "paramType": "query",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "An array of TLDs for which the verification was started. Alternately you can specify the whole domain from which the TLD will be extracted"
            }
          ],
          "responseMessages": [
            {
              "code": 200,
              "message": "Request was successful",
              "responseModel": "[IdentityDocumentVerification]"
            },
            {
              "code": 400,
              "message": "Request was malformed",
              "responseModel": "Error"
            },
            {
              "code": 401,
              "message": "Authentication info not sent or invalid",
              "responseModel": "Error"
            },
            {
              "code": 403,
              "message": "Authenticated user is not allowed access",
              "responseModel": "Error"
            },
            {
              "code": 404,
              "message": "Identity document not found",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "`identityDocumentVerification` does not fulfill the schema",
              "responseModel": "Error",
              "x-error-code": "INVALID_BODY"
            },
            {
              "code": 429,
              "message": "Too many requests received within interval",
              "responseModel": "ErrorLimit"
            },
            {
              "code": 500,
              "message": "Internal server error",
              "responseModel": "Error"
            }
          ],
          "consumes": [
            "application/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
          ],
          "authorizations": {
            "sso_key": []
          }
        },
        {
          "method": "GET",
          "nickname": "getIdentityDocumentVerification",
          "type": "array",
          "items": {
            "type": "IdentityDocumentVerification"
          },
          "summary": "Retrieve a list of Verifications for the specified Identity Document",
          "parameters": [
            {
              "name": "X-Shopper-Id",
              "required": false,
              "paramType": "header",
              "type": "string",
              "description": [
                "Shopper ID of the owner of the identity document. This is only required if you are a Reseller managing",
                "identity documents for your customers. Use this header to pass in their subaccount ID"
              ]
            },
            {
              "name": "identityDocumentId",
              "required": true,
              "paramType": "path",
              "type": "string",
              "description": "Unique identifier of the current identity document"
            },
            {
              "name": "tlds",
              "required": false,
              "paramType": "query",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "An array of TLDs for which to retrieve identity document verification jobs. Alternately you can specify the whole domain from which the TLD will be extracted"
            }
          ],
          "responseMessages": [
            {
              "code": 200,
              "message": "Request was successful",
              "responseModel": "[IdentityDocumentVerification]"
            },
            {
              "code": 400,
              "message": "Request was malformed",
              "responseModel": "Error"
            },
            {
              "code": 401,
              "message": "Authentication info not sent or invalid",
              "responseModel": "Error"
            },
            {
              "code": 403,
              "message": "Authenticated user is not allowed access",
              "responseModel": "Error"
            },
            {
              "code": 404,
              "message": "Identity document not found",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "One or more supplied domain/tld are invalid",
              "responseModel": "Error"
            },
            {
              "code": 429,
              "message": "Too many requests received within interval",
              "responseModel": "ErrorLimit"
            },
            {
              "code": 500,
              "message": "Internal server error",
              "responseModel": "Error"
            }
          ],
          "consumes": [
            "application/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
          ],
          "authorizations": {
            "sso_key": []
          }
        }
      ]
    },
    {
      "path": "/v1/domains/{domain}/contacts",
      "operations": [
        {
          "method": "PATCH",
          "nickname": "updateContacts",
          "type": "void",
          "summary": "Update domain",
          "parameters": [
            {
              "name": "X-Shopper-Id",
              "required": false,
              "paramType": "header",
              "type": "string",
              "description": "Shopper for whom domain contacts are to be updated. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you're a Reseller, but purchased a Domain via http://www.godaddy.com"
            },
            {
              "name": "domain",
              "required": true,
              "paramType": "path",
              "type": "string",
              "description": "Domain whose Contacts are to be updated."
            },
            {
              "name": "contacts",
              "required": true,
              "paramType": "body",
              "type": "DomainContacts",
              "description": "Changes to apply to existing Contacts"
            }
          ],
          "responseMessages": [
            {
              "code": 204,
              "message": "Request was successful"
            },
            {
              "code": 400,
              "message": "Request was malformed",
              "responseModel": "Error"
            },
            {
              "code": 401,
              "message": "Authentication info not sent or invalid",
              "responseModel": "Error"
            },
            {
              "code": 403,
              "message": "Authenticated user is not allowed access",
              "responseModel": "Error"
            },
            {
              "code": 404,
              "message": "Domain not found",
              "responseModel": "Error",
              "x-error-code": "DOMAIN_NOT_FOUND"
            },
            {
              "code": 404,
              "message": "Identity document not found",
              "responseModel": "Error",
              "x-error-code": "IDENTITY_DOCUMENT_NOT_FOUND"
            },
            {
              "code": 422,
              "message": "`contacts` do not fulfill the schema",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "`domain` is not a valid Domain name",
              "responseModel": "Error"
            },
            {
              "code": 429,
              "message": "Too many requests received within interval",
              "responseModel": "ErrorLimit"
            },
            {
              "code": 500,
              "message": "Internal server error",
              "responseModel": "Error"
            },
            {
              "code": 504,
              "message": "Gateway timeout",
              "responseModel": "Error"
            }
          ],
          "consumes": [
            "application/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
          ],
          "authorizations": {
            "sso_key": []
          }
        }
      ]
    },
    {
      "path": "/v1/domains/agreements",
      "operations": [
        {
          "method": "GET",
          "nickname": "getAgreement",
          "type": "array",
          "items": {
            "type": "LegalAgreement"
          },
          "summary": "Retrieve the legal agreement(s) required to purchase the specified TLD and add-ons",
          "parameters": [
            {
              "name": "X-Market-Id",
              "required": false,
              "paramType": "header",
              "type": "string",
              "format": "bcp-47",
              "defaultValue": "en-US",
              "description": "Unique identifier of the Market used to retrieve/translate Legal Agreements"
            },
            {
              "name": "tlds",
              "required": true,
              "paramType": "query",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "list of TLDs whose legal agreements are to be retrieved"
            },
            {
              "name": "privacy",
              "required": true,
              "paramType": "query",
              "type": "boolean",
              "description": "Whether or not privacy has been requested"
            },
            {
              "name": "forTransfer",
              "required": false,
              "paramType": "query",
              "type": "boolean",
              "description": "Whether or not domain tranfer has been requested"
            }
          ],
          "responseMessages": [
            {
              "code": 200,
              "message": "Request was successful",
              "responseModel": "[LegalAgreement]"
            },
            {
              "code": 400,
              "message": "Request was malformed",
              "responseModel": "Error"
            },
            {
              "code": 401,
              "message": "Authentication info not sent or invalid",
              "responseModel": "Error"
            },
            {
              "code": 403,
              "message": "Authenticated user is not allowed access",
              "responseModel": "Error"
            },
            {
              "code": 404,
              "message": "Resource not found",
              "responseModel": "Error"
            },
            {
              "code": 429,
              "message": "Too many requests received within interval",
              "responseModel": "ErrorLimit"
            },
            {
              "code": 500,
              "message": "Internal server error",
              "responseModel": "Error"
            }
          ],
          "consumes": [
            "application/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
          ],
          "authorizations": {
            "sso_key": []
          }
        }
      ]
    },
    {
      "path": "/v1/domains/contacts/validate",
      "operations": [
        {
          "method": "POST",
          "nickname": "ContactsValidate",
          "type": "void",
          "summary": "Validate the request body using the Domain Contact Validation Schema for specified domains.",
          "notes": "All contacts specified in request will be validated against all domains specifed in \"domains\". As an alternative, you can also pass in tlds, with the exception of `uk`, which requires full domain names",
          "parameters": [
            {
              "name": "X-Private-Label-Id",
              "required": false,
              "defaultValue": 1,
              "paramType": "header",
              "type": "integer",
              "description": "PrivateLabelId to operate as, if different from JWT"
            },
            {
              "name": "marketId",
              "required": false,
              "paramType": "query",
              "type": "string",
              "format": "bcp-47",
              "maxLength": 50,
              "defaultValue": "en-US",
              "description": "MarketId in which the request is being made, and for which responses should be localized"
            },
            {
              "name": "body",
              "required": true,
              "paramType": "body",
              "type": "DomainsContactsBulk",
              "description": "An instance document expected for domains contacts validation"
            }
          ],
          "responseMessages": [
            {
              "code": 204,
              "message": "Request was successful"
            },
            {
              "code": 400,
              "message": "Request was malformed",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "Request body doesn't fulfill schema, see details in `fields`",
              "responseModel": "ErrorDomainContactsValidate",
              "x-error-code": "INVALID_BODY"
            },
            {
              "code": 429,
              "message": "Too many requests received within interval",
              "responseModel": "ErrorLimit"
            },
            {
              "code": 500,
              "message": "Internal server error",
              "responseModel": "Error"
            }
          ],
          "consumes": [
            "application/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
          ],
          "authorizations": {
            "sso_key": []
          }
        }
      ]
    },
    {
      "path": "/v1/domains/{domain}/records/{type?}/{name?}",
      "operations": [
        {
          "method": "GET",
          "nickname": "recordGet",
          "type": "array",
          "items": {
            "type": "DNSRecord"
          },
          "summary": "Retrieve DNS Records for the specified Domain, optionally with the specified Type and/or Name",
          "parameters": [
            {
              "name": "X-Shopper-Id",
              "required": false,
              "paramType": "header",
              "type": "string",
              "description": "Shopper ID which owns the domain. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you're a Reseller, but purchased a Domain via http://www.godaddy.com"
            },
            {
              "name": "domain",
              "required": true,
              "paramType": "path",
              "type": "string",
              "description": "Domain whose DNS Records are to be retrieved"
            },
            {
              "name": "type",
              "required": false,
              "paramType": "path",
              "type": "string",
              "enum": [
                "A",
                "AAAA",
                "CNAME",
                "MX",
                "NS",
                "SOA",
                "SRV",
                "TXT"
              ],
              "description": "DNS Record Type for which DNS Records are to be retrieved"
            },
            {
              "name": "name",
              "required": false,
              "paramType": "path",
              "type": "string",
              "description": "DNS Record Name for which DNS Records are to be retrieved"
            },
            {
              "name": "offset",
              "required": false,
              "paramType": "query",
              "type": "integer",
              "description": "Number of results to skip for pagination"
            },
            {
              "name": "limit",
              "required": false,
              "paramType": "query",
              "type": "integer",
              "description": "Maximum number of items to return"
            }
          ],
          "responseMessages": [
            {
              "code": 200,
              "message": "Request was successful",
              "responseModel": "[DNSRecord]"
            },
            {
              "code": 400,
              "message": "Request was malformed",
              "responseModel": "Error"
            },
            {
              "code": 401,
              "message": "Authentication info not sent or invalid",
              "responseModel": "Error"
            },
            {
              "code": 403,
              "message": "Authenticated user is not allowed access",
              "responseModel": "Error"
            },
            {
              "code": 404,
              "message": "Resource not found",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "`domain` is not a valid Domain name",
              "responseModel": "Error"
            },
            {
              "code": 429,
              "message": "Too many requests received within interval",
              "responseModel": "ErrorLimit"
            },
            {
              "code": 500,
              "message": "Internal server error",
              "responseModel": "Error"
            },
            {
              "code": 504,
              "message": "Gateway timeout",
              "responseModel": "Error"
            }
          ],
          "consumes": [
            "application/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
          ],
          "authorizations": {
            "sso_key": []
          }
        }
      ]
    },
    {
      "path": "/v1/domains/{domain}/records",
      "operations": [
        {
          "method": "PUT",
          "nickname": "recordReplace",
          "type": "void",
          "summary": "Replace all DNS Records for the specified Domain",
          "parameters": [
            {
              "name": "X-Shopper-Id",
              "required": false,
              "paramType": "header",
              "type": "string",
              "description": "Shopper ID which owns the domain. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you're a Reseller, but purchased a Domain via http://www.godaddy.com"
            },
            {
              "name": "domain",
              "required": true,
              "paramType": "path",
              "type": "string",
              "description": "Domain whose DNS Records are to be replaced"
            },
            {
              "name": "records",
              "required": true,
              "paramType": "body",
              "type": "array",
              "items": {
                "type": "DNSRecord"
              },
              "description": "DNS Records to replace whatever currently exists"
            }
          ],
          "responseMessages": [
            {
              "code": 200,
              "message": "Request was successful"
            },
            {
              "code": 400,
              "message": "Request was malformed",
              "responseModel": "Error"
            },
            {
              "code": 401,
              "message": "Authentication info not sent or invalid",
              "responseModel": "Error"
            },
            {
              "code": 403,
              "message": "Authenticated user is not allowed access",
              "responseModel": "Error"
            },
            {
              "code": 404,
              "message": "Resource not found",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "`domain` is not a valid Domain name",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "`record` does not fulfill the schema",
              "responseModel": "Error"
            },
            {
              "code": 429,
              "message": "Too many requests received within interval",
              "responseModel": "ErrorLimit"
            },
            {
              "code": 500,
              "message": "Internal server error",
              "responseModel": "Error"
            },
            {
              "code": 504,
              "message": "Gateway timeout",
              "responseModel": "Error"
            }
          ],
          "consumes": [
            "application/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
          ],
          "authorizations": {
            "sso_key": []
          }
        },
        {
          "method": "PATCH",
          "nickname": "recordAdd",
          "type": "void",
          "summary": "Add the specified DNS Records to the specified Domain",
          "parameters": [
            {
              "name": "X-Shopper-Id",
              "required": false,
              "paramType": "header",
              "type": "string",
              "description": "Shopper ID which owns the domain. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you're a Reseller, but purchased a Domain via http://www.godaddy.com"
            },
            {
              "name": "domain",
              "required": true,
              "paramType": "path",
              "type": "string",
              "description": "Domain whose DNS Records are to be augmented"
            },
            {
              "name": "records",
              "required": true,
              "paramType": "body",
              "type": "array",
              "description": "DNS Records to add to whatever currently exists"
            }
          ],
          "responseMessages": [
            {
              "code": 200,
              "message": "Request was successful"
            },
            {
              "code": 400,
              "message": "Request was malformed",
              "responseModel": "Error"
            },
            {
              "code": 401,
              "message": "Authentication info not sent or invalid",
              "responseModel": "Error"
            },
            {
              "code": 403,
              "message": "Authenticated user is not allowed access",
              "responseModel": "Error"
            },
            {
              "code": 404,
              "message": "Resource not found",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "`domain` is not a valid Domain name",
              "responseModel": "Error"
            },
            {
              "code": 429,
              "message": "Too many requests received within interval",
              "responseModel": "ErrorLimit"
            },
            {
              "code": 500,
              "message": "Internal server error",
              "responseModel": "Error"
            },
            {
              "code": 504,
              "message": "Gateway timeout",
              "responseModel": "Error"
            }
          ],
          "consumes": [
            "application/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
          ],
          "authorizations": {
            "sso_key": []
          }
        }
      ]
    },
    {
      "path": "/v1/domains/{domain}/records/{type}",
      "operations": [
        {
          "method": "PUT",
          "nickname": "recordReplaceType",
          "type": "void",
          "summary": "Replace all DNS Records for the specified Domain with the specified Type",
          "parameters": [
            {
              "name": "X-Shopper-Id",
              "required": false,
              "paramType": "header",
              "type": "string",
              "description": "Shopper ID which owns the domain. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you're a Reseller, but purchased a Domain via http://www.godaddy.com"
            },
            {
              "name": "domain",
              "required": true,
              "paramType": "path",
              "type": "string",
              "description": "Domain whose DNS Records are to be replaced"
            },
            {
              "name": "type",
              "required": true,
              "paramType": "path",
              "type": "string",
              "enum": [
                "A",
                "AAAA",
                "CNAME",
                "MX",
                "NS",
                "SOA",
                "SRV",
                "TXT"
              ],
              "description": "DNS Record Type for which DNS Records are to be replaced"
            },
            {
              "name": "records",
              "required": true,
              "paramType": "body",
              "type": "array",
              "items": {
                "type": "DNSRecordCreateType"
              },
              "description": "DNS Records to replace whatever currently exists"
            }
          ],
          "responseMessages": [
            {
              "code": 200,
              "message": "Request was successful"
            },
            {
              "code": 400,
              "message": "Request was malformed",
              "responseModel": "Error"
            },
            {
              "code": 401,
              "message": "Authentication info not sent or invalid",
              "responseModel": "Error"
            },
            {
              "code": 403,
              "message": "Authenticated user is not allowed access",
              "responseModel": "Error"
            },
            {
              "code": 404,
              "message": "Resource not found",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "`domain` is not a valid Domain name",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "`record` does not fulfill the schema",
              "responseModel": "Error"
            },
            {
              "code": 429,
              "message": "Too many requests received within interval",
              "responseModel": "ErrorLimit"
            },
            {
              "code": 500,
              "message": "Internal server error",
              "responseModel": "Error"
            },
            {
              "code": 504,
              "message": "Gateway timeout",
              "responseModel": "Error"
            }
          ],
          "consumes": [
            "application/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
          ],
          "authorizations": {
            "sso_key": []
          }
        }
      ]
    },
    {
      "path": "/v1/domains/{domain}/records/{type}/{name}",
      "operations": [
        {
          "method": "PUT",
          "nickname": "recordReplaceTypeName",
          "type": "void",
          "summary": "Replace all DNS Records for the specified Domain with the specified Type and Name",
          "parameters": [
            {
              "name": "X-Shopper-Id",
              "required": false,
              "paramType": "header",
              "type": "string",
              "description": "Shopper ID which owns the domain. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you're a Reseller, but purchased a Domain via http://www.godaddy.com"
            },
            {
              "name": "domain",
              "required": true,
              "paramType": "path",
              "type": "string",
              "description": "Domain whose DNS Records are to be replaced"
            },
            {
              "name": "type",
              "required": true,
              "paramType": "path",
              "type": "string",
              "enum": [
                "A",
                "AAAA",
                "CNAME",
                "MX",
                "NS",
                "SOA",
                "SRV",
                "TXT"
              ],
              "description": "DNS Record Type for which DNS Records are to be replaced"
            },
            {
              "name": "name",
              "required": true,
              "paramType": "path",
              "type": "string",
              "description": "DNS Record Name for which DNS Records are to be replaced"
            },
            {
              "name": "records",
              "required": true,
              "paramType": "body",
              "type": "array",
              "items": {
                "type": "DNSRecordCreateTypeName"
              },
              "description": "DNS Records to replace whatever currently exists"
            }
          ],
          "responseMessages": [
            {
              "code": 200,
              "message": "Request was successful"
            },
            {
              "code": 400,
              "message": "Request was malformed",
              "responseModel": "Error"
            },
            {
              "code": 401,
              "message": "Authentication info not sent or invalid",
              "responseModel": "Error"
            },
            {
              "code": 403,
              "message": "Authenticated user is not allowed access",
              "responseModel": "Error"
            },
            {
              "code": 404,
              "message": "Resource not found",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "`domain` is not a valid Domain name",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "`record` does not fulfill the schema",
              "responseModel": "Error"
            },
            {
              "code": 429,
              "message": "Too many requests received within interval",
              "responseModel": "ErrorLimit"
            },
            {
              "code": 500,
              "message": "Internal server error",
              "responseModel": "Error"
            },
            {
              "code": 504,
              "message": "Gateway timeout",
              "responseModel": "Error"
            }
          ],
          "consumes": [
            "application/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
          ],
          "authorizations": {
            "sso_key": []
          }
        }
      ]
    },
    {
      "path": "/v1/domains/suggest",
      "operations": [
        {
          "method": "GET",
          "nickname": "suggest",
          "type": "array",
          "items": {
            "type": "DomainSuggestion"
          },
          "summary": "Suggest alternate Domain names based on a seed Domain, a set of keywords, or the shopper's purchase history",
          "parameters": [
            {
              "name": "X-Shopper-Id",
              "required": false,
              "paramType": "header",
              "type": "string",
              "description": "Shopper ID for which the suggestions are being generated"
            },
            {
              "name": "query",
              "required": false,
              "paramType": "query",
              "type": "string",
              "description": "Domain name or set of keywords for which alternative domain names will be suggested"
            },
            {
              "name": "country",
              "required": false,
              "paramType": "query",
              "type": "string",
              "format": "iso-country-code",
              "enum": [
                "AC",
                "AD",
                "AE",
                "AF",
                "AG",
                "AI",
                "AL",
                "AM",
                "AO",
                "AQ",
                "AR",
                "AS",
                "AT",
                "AU",
                "AW",
                "AX",
                "AZ",
                "BA",
                "BB",
                "BD",
                "BE",
                "BF",
                "BG",
                "BH",
                "BI",
                "BJ",
                "BM",
                "BN",
                "BO",
                "BQ",
                "BR",
                "BS",
                "BT",
                "BV",
                "BW",
                "BY",
                "BZ",
                "CA",
                "CC",
                "CD",
                "CF",
                "CG",
                "CH",
                "CI",
                "CK",
                "CL",
                "CM",
                "CN",
                "CO",
                "CR",
                "CV",
                "CW",
                "CX",
                "CY",
                "CZ",
                "DE",
                "DJ",
                "DK",
                "DM",
                "DO",
                "DZ",
                "EC",
                "EE",
                "EG",
                "EH",
                "ER",
                "ES",
                "ET",
                "FI",
                "FJ",
                "FK",
                "FM",
                "FO",
                "FR",
                "GA",
                "GB",
                "GD",
                "GE",
                "GF",
                "GG",
                "GH",
                "GI",
                "GL",
                "GM",
                "GN",
                "GP",
                "GQ",
                "GR",
                "GS",
                "GT",
                "GU",
                "GW",
                "GY",
                "HK",
                "HM",
                "HN",
                "HR",
                "HT",
                "HU",
                "ID",
                "IE",
                "IL",
                "IM",
                "IN",
                "IO",
                "IQ",
                "IS",
                "IT",
                "JE",
                "JM",
                "JO",
                "JP",
                "KE",
                "KG",
                "KH",
                "KI",
                "KM",
                "KN",
                "KR",
                "KV",
                "KW",
                "KY",
                "KZ",
                "LA",
                "LB",
                "LC",
                "LI",
                "LK",
                "LR",
                "LS",
                "LT",
                "LU",
                "LV",
                "LY",
                "MA",
                "MC",
                "MD",
                "ME",
                "MG",
                "MH",
                "MK",
                "ML",
                "MM",
                "MN",
                "MO",
                "MP",
                "MQ",
                "MR",
                "MS",
                "MT",
                "MU",
                "MV",
                "MW",
                "MX",
                "MY",
                "MZ",
                "NA",
                "NC",
                "NE",
                "NF",
                "NG",
                "NI",
                "NL",
                "NO",
                "NP",
                "NR",
                "NU",
                "NZ",
                "OM",
                "PA",
                "PE",
                "PF",
                "PG",
                "PH",
                "PK",
                "PL",
                "PM",
                "PN",
                "PR",
                "PS",
                "PT",
                "PW",
                "PY",
                "QA",
                "RE",
                "RO",
                "RS",
                "RU",
                "RW",
                "SA",
                "SB",
                "SC",
                "SE",
                "SG",
                "SH",
                "SI",
                "SJ",
                "SK",
                "SL",
                "SM",
                "SN",
                "SO",
                "SR",
                "ST",
                "SV",
                "SX",
                "SZ",
                "TC",
                "TD",
                "TF",
                "TG",
                "TH",
                "TJ",
                "TK",
                "TL",
                "TM",
                "TN",
                "TO",
                "TP",
                "TR",
                "TT",
                "TV",
                "TW",
                "TZ",
                "UA",
                "UG",
                "UM",
                "US",
                "UY",
                "UZ",
                "VA",
                "VC",
                "VE",
                "VG",
                "VI",
                "VN",
                "VU",
                "WF",
                "WS",
                "YE",
                "YT",
                "ZA",
                "ZM",
                "ZW"
              ],
              "description": "Two-letter ISO country code to be used as a hint for target region<br/><br/>\nNOTE: These are sample values, there are many\n<a href=\"http://www.iso.org/iso/country_codes.htm\">more</a>"
            },
            {
              "name": "city",
              "required": false,
              "paramType": "query",
              "type": "string",
              "format": "city-name",
              "description": "Name of city to be used as a hint for target region"
            },
            {
              "name": "sources",
              "required": false,
              "paramType": "query",
              "type": "array",
              "items": {
                "enum": [
                  "CC_TLD",
                  "EXTENSION",
                  "KEYWORD_SPIN",
                  "PREMIUM",
                  "cctld",
                  "extension",
                  "keywordspin",
                  "premium"
                ],
                "type": "string"
              },
              "description": "Sources to be queried<br/><br/><ul>\n<li><strong>CC_TLD</strong> - Varies the TLD using Country Codes</li>\n<li><strong>EXTENSION</strong> - Varies the TLD</li>\n<li><strong>KEYWORD_SPIN</strong> - Identifies keywords and then rotates each one</li>\n<li><strong>PREMIUM</strong> - Includes variations with premium prices</li></ul>"
            },
            {
              "name": "tlds",
              "required": false,
              "paramType": "query",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Top-level domains to be included in suggestions<br/><br/>\nNOTE: These are sample values, there are many\n<a href=\"http://www.godaddy.com/tlds/gtld.aspx#domain_search_form\">more</a>"
            },
            {
              "name": "lengthMax",
              "required": false,
              "paramType": "query",
              "type": "integer",
              "pattern": "^[1-9][0-9]*$",
              "description": "Maximum length of second-level domain"
            },
            {
              "name": "lengthMin",
              "required": false,
              "paramType": "query",
              "type": "integer",
              "pattern": "^[1-9][0-9]*$",
              "description": "Minimum length of second-level domain"
            },
            {
              "name": "limit",
              "required": false,
              "paramType": "query",
              "type": "integer",
              "pattern": "^[1-9][0-9]*$",
              "description": "Maximum number of suggestions to return"
            },
            {
              "name": "waitMs",
              "required": false,
              "paramType": "query",
              "type": "integer",
              "format": "integer-positive",
              "defaultValue": 1000,
              "description": "Maximum amount of time, in milliseconds, to wait for responses\nIf elapses, return the results compiled up to that point"
            }
          ],
          "responseMessages": [
            {
              "code": 200,
              "message": "Request was successful",
              "responseModel": "[DomainSuggestion]"
            },
            {
              "code": 400,
              "message": "Request was malformed",
              "responseModel": "Error"
            },
            {
              "code": 401,
              "message": "Authentication info not sent or invalid",
              "responseModel": "Error"
            },
            {
              "code": 403,
              "message": "Authenticated user is not allowed access",
              "responseModel": "Error"
            },
            {
              "code": 404,
              "message": "Resource not found",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "`query` must be specified",
              "responseModel": "Error"
            },
            {
              "code": 429,
              "message": "Too many requests received within interval",
              "responseModel": "ErrorLimit"
            },
            {
              "code": 500,
              "message": "Internal server error",
              "responseModel": "Error"
            },
            {
              "code": 504,
              "message": "Gateway timeout",
              "responseModel": "Error"
            }
          ],
          "consumes": [
            "application/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
          ],
          "authorizations": {
            "sso_key": []
          }
        }
      ]
    }
  ],
  "consumes": [
    "application/json",
    "application/x-www-form-urlencoded",
    "application/xml",
    "text/xml"
  ],
  "produces": [
    "application/json",
    "application/xml",
    "text/xml",
    "application/javascript",
    "text/javascript"
  ],
  "models": {
    "domain": {
      "id": "domain",
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "number",
          "format": "double"
        }
      },
      "required": []
    },
    "DomainUpdate": {
      "id": "DomainUpdate",
      "additionalProperties": false,
      "properties": {
        "locked": {
          "type": "boolean",
          "description": "Whether or not the domain should be locked to prevent transfers"
        },
        "nameServers": {
          "type": "array",
          "items": {
            "type": "any",
            "format": "host-name",
            "pattern": "([^.]+\\.)*[^.]+\\.[^.]+"
          },
          "description": "Fully-qualified domain names for Name Servers to associate with the domain"
        },
        "renewAuto": {
          "type": "boolean",
          "description": "Whether or not the domain should be configured to automatically renew"
        },
        "subaccountId": {
          "type": "string",
          "description": "Reseller subaccount shopperid who can manage the domain"
        }
      },
      "required": []
    },
    "Error": {
      "id": "Error",
      "additionalProperties": false,
      "properties": {
        "code": {
          "type": "string",
          "format": "constant",
          "pattern": "^[A-Z_][A-Z0-9_]*$",
          "description": "Short identifier for the error, suitable for indicating the specific error within client code"
        },
        "message": {
          "type": "string",
          "description": "Human-readable, English description of the error"
        },
        "fields": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "ErrorField"
          },
          "description": "List of the specific fields, and the errors found with their contents"
        }
      },
      "required": [
        "code"
      ]
    },
    "ErrorField": {
      "id": "ErrorField",
      "additionalProperties": false,
      "properties": {
        "path": {
          "type": "string",
          "format": "json-path",
          "pattern": "^[a-z_]([a-zA-Z0-9_.]*)*$",
          "description": "<ul>\n<li style='margin-left: 12px;'>JSONPath referring to a field containing an error</li>\n<strong style='margin-left: 12px;'>OR</strong>\n<li style='margin-left: 12px;'>JSONPath referring to a field that refers to an object containing an error, with more detail in `pathRelated`</li>\n</ul>"
        },
        "pathRelated": {
          "type": "string",
          "format": "json-path",
          "pattern": "^[a-z_]([a-zA-Z0-9_.]*)*$",
          "description": "JSONPath referring to a field containing an error, which is referenced by `path`"
        },
        "code": {
          "type": "string",
          "format": "constant",
          "pattern": "^[A-Z_][A-Z0-9_]*$",
          "description": "Short identifier for the error, suitable for indicating the specific error within client code"
        },
        "message": {
          "type": "string",
          "description": "Human-readable, English description of the problem with the contents of the field"
        }
      },
      "required": [
        "path",
        "code"
      ]
    },
    "ErrorLimit": {
      "id": "ErrorLimit",
      "additionalProperties": false,
      "properties": {
        "retryAfterSec": {
          "type": "integer",
          "format": "integer-positive",
          "description": "Number of seconds to wait before attempting a similar request"
        },
        "code": {
          "type": "string",
          "format": "constant",
          "pattern": "^[A-Z_][A-Z0-9_]*$",
          "description": "Short identifier for the error, suitable for indicating the specific error within client code"
        },
        "message": {
          "type": "string",
          "description": "Human-readable, English description of the error"
        },
        "fields": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "ErrorField"
          },
          "description": "List of the specific fields, and the errors found with their contents"
        }
      },
      "required": [
        "retryAfterSec",
        "code"
      ]
    },
    "IdentityDocumentCreate": {
      "id": "IdentityDocumentCreate",
      "additionalProperties": false,
      "properties": {
        "identificationCountry": {
          "type": "string",
          "format": "iso-country-code",
          "enum": [
            "AD",
            "AE",
            "AF",
            "AG",
            "AI",
            "AL",
            "AM",
            "AO",
            "AQ",
            "AR",
            "AS",
            "AT",
            "AU",
            "AW",
            "AX",
            "AZ",
            "BA",
            "BB",
            "BD",
            "BE",
            "BF",
            "BG",
            "BH",
            "BI",
            "BJ",
            "BL",
            "BM",
            "BN",
            "BO",
            "BQ",
            "BR",
            "BS",
            "BT",
            "BV",
            "BW",
            "BY",
            "BZ",
            "CA",
            "CC",
            "CD",
            "CF",
            "CG",
            "CH",
            "CI",
            "CK",
            "CL",
            "CM",
            "CN",
            "CO",
            "CR",
            "CU",
            "CV",
            "CW",
            "CX",
            "CY",
            "CZ",
            "DE",
            "DJ",
            "DK",
            "DM",
            "DO",
            "DZ",
            "EC",
            "EE",
            "EG",
            "EH",
            "ER",
            "ES",
            "ET",
            "FI",
            "FJ",
            "FK",
            "FM",
            "FO",
            "FR",
            "GA",
            "GB",
            "GD",
            "GE",
            "GF",
            "GG",
            "GH",
            "GI",
            "GL",
            "GM",
            "GN",
            "GP",
            "GQ",
            "GR",
            "GS",
            "GT",
            "GU",
            "GW",
            "GY",
            "HK",
            "HM",
            "HN",
            "HR",
            "HT",
            "HU",
            "ID",
            "IE",
            "IL",
            "IM",
            "IN",
            "IO",
            "IQ",
            "IR",
            "IS",
            "IT",
            "JE",
            "JM",
            "JO",
            "JP",
            "KE",
            "KG",
            "KH",
            "KI",
            "KM",
            "KN",
            "KP",
            "KR",
            "KW",
            "KY",
            "KZ",
            "LA",
            "LB",
            "LC",
            "LI",
            "LK",
            "LR",
            "LS",
            "LT",
            "LU",
            "LV",
            "LY",
            "MA",
            "MC",
            "MD",
            "ME",
            "MF",
            "MG",
            "MH",
            "MK",
            "ML",
            "MM",
            "MN",
            "MO",
            "MP",
            "MQ",
            "MR",
            "MS",
            "MT",
            "MU",
            "MV",
            "MW",
            "MX",
            "MY",
            "MZ",
            "NA",
            "NC",
            "NE",
            "NF",
            "NG",
            "NI",
            "NL",
            "NO",
            "NP",
            "NR",
            "NU",
            "NZ",
            "OM",
            "PA",
            "PE",
            "PF",
            "PG",
            "PH",
            "PK",
            "PL",
            "PM",
            "PN",
            "PR",
            "PS",
            "PT",
            "PW",
            "PY",
            "QA",
            "RE",
            "RO",
            "RS",
            "RU",
            "RW",
            "SA",
            "SB",
            "SC",
            "SD",
            "SE",
            "SG",
            "SH",
            "SI",
            "SJ",
            "SK",
            "SL",
            "SM",
            "SN",
            "SO",
            "SR",
            "SS",
            "ST",
            "SV",
            "SX",
            "SY",
            "SZ",
            "TC",
            "TD",
            "TF",
            "TG",
            "TH",
            "TJ",
            "TK",
            "TL",
            "TM",
            "TN",
            "TO",
            "TR",
            "TT",
            "TV",
            "TW",
            "TZ",
            "UA",
            "UG",
            "UM",
            "US",
            "UY",
            "UZ",
            "VA",
            "VC",
            "VE",
            "VG",
            "VI",
            "VN",
            "VU",
            "WF",
            "WS",
            "YE",
            "YT",
            "ZA",
            "ZM",
            "ZW"
          ],
          "description": [
            "Two-letter ISO country code to be used as a hint for target region<br/><br/>",
            "NOTE: These are sample values, there are many",
            "<a href=\"http://www.iso.org/iso/country_codes.htm\">more</a>"
          ]
        },
        "identificationType": {
          "type": "string",
          "enum": [
            "BUSINESS_LICENSE",
            "DRIVERS_LICENSE",
            "ORGANIZATION_CODE_CERTIFICATE",
            "PASSPORT",
            "RESIDENT_ID",
            "RESIDENT_ID_TEMPORARY"
          ],
          "description": "Type of the identity document"
        },
        "identificationNumber": {
          "type": "string",
          "description": "Individual or business identification number written on the document. Must match image exactly"
        },
        "legalEntityName": {
          "type": "string",
          "description": "Individual or business name written on the document. Must match image exactly"
        },
        "image": {
          "type": "string",
          "description": [
            "The base64 encoded string of the document image. The document image size must be between 4KB and 10MB. Supported formats",
            "are bmp, jpg/jpeg, jfif, png, gif, and tiff"
          ]
        },
        "contact": {
          "$ref": "Contact"
        }
      },
      "required": [
        "contact",
        "identificationCountry",
        "identificationNumber",
        "identificationType",
        "image",
        "legalEntityName"
      ]
    },
    "IdentityDocumentId": {
      "id": "IdentityDocumentId",
      "additionalProperties": false,
      "properties": {
        "identityDocumentId": {
          "type": "string",
          "description": "The unique identifier of an identity document"
        }
      },
      "required": [
        "identityDocumentId"
      ]
    },
    "IdentityDocumentSummary": {
      "id": "IdentityDocumentSummary",
      "additionalProperties": false,
      "properties": {
        "identityDocumentId": {
          "type": "string",
          "description": "The unique identifier of an identity document"
        },
        "identificationCountry": {
          "type": "string",
          "format": "iso-country-code",
          "enum": [
            "AD",
            "AE",
            "AF",
            "AG",
            "AI",
            "AL",
            "AM",
            "AO",
            "AQ",
            "AR",
            "AS",
            "AT",
            "AU",
            "AW",
            "AX",
            "AZ",
            "BA",
            "BB",
            "BD",
            "BE",
            "BF",
            "BG",
            "BH",
            "BI",
            "BJ",
            "BL",
            "BM",
            "BN",
            "BO",
            "BQ",
            "BR",
            "BS",
            "BT",
            "BV",
            "BW",
            "BY",
            "BZ",
            "CA",
            "CC",
            "CD",
            "CF",
            "CG",
            "CH",
            "CI",
            "CK",
            "CL",
            "CM",
            "CN",
            "CO",
            "CR",
            "CU",
            "CV",
            "CW",
            "CX",
            "CY",
            "CZ",
            "DE",
            "DJ",
            "DK",
            "DM",
            "DO",
            "DZ",
            "EC",
            "EE",
            "EG",
            "EH",
            "ER",
            "ES",
            "ET",
            "FI",
            "FJ",
            "FK",
            "FM",
            "FO",
            "FR",
            "GA",
            "GB",
            "GD",
            "GE",
            "GF",
            "GG",
            "GH",
            "GI",
            "GL",
            "GM",
            "GN",
            "GP",
            "GQ",
            "GR",
            "GS",
            "GT",
            "GU",
            "GW",
            "GY",
            "HK",
            "HM",
            "HN",
            "HR",
            "HT",
            "HU",
            "ID",
            "IE",
            "IL",
            "IM",
            "IN",
            "IO",
            "IQ",
            "IR",
            "IS",
            "IT",
            "JE",
            "JM",
            "JO",
            "JP",
            "KE",
            "KG",
            "KH",
            "KI",
            "KM",
            "KN",
            "KP",
            "KR",
            "KW",
            "KY",
            "KZ",
            "LA",
            "LB",
            "LC",
            "LI",
            "LK",
            "LR",
            "LS",
            "LT",
            "LU",
            "LV",
            "LY",
            "MA",
            "MC",
            "MD",
            "ME",
            "MF",
            "MG",
            "MH",
            "MK",
            "ML",
            "MM",
            "MN",
            "MO",
            "MP",
            "MQ",
            "MR",
            "MS",
            "MT",
            "MU",
            "MV",
            "MW",
            "MX",
            "MY",
            "MZ",
            "NA",
            "NC",
            "NE",
            "NF",
            "NG",
            "NI",
            "NL",
            "NO",
            "NP",
            "NR",
            "NU",
            "NZ",
            "OM",
            "PA",
            "PE",
            "PF",
            "PG",
            "PH",
            "PK",
            "PL",
            "PM",
            "PN",
            "PR",
            "PS",
            "PT",
            "PW",
            "PY",
            "QA",
            "RE",
            "RO",
            "RS",
            "RU",
            "RW",
            "SA",
            "SB",
            "SC",
            "SD",
            "SE",
            "SG",
            "SH",
            "SI",
            "SJ",
            "SK",
            "SL",
            "SM",
            "SN",
            "SO",
            "SR",
            "SS",
            "ST",
            "SV",
            "SX",
            "SY",
            "SZ",
            "TC",
            "TD",
            "TF",
            "TG",
            "TH",
            "TJ",
            "TK",
            "TL",
            "TM",
            "TN",
            "TO",
            "TR",
            "TT",
            "TV",
            "TW",
            "TZ",
            "UA",
            "UG",
            "UM",
            "US",
            "UY",
            "UZ",
            "VA",
            "VC",
            "VE",
            "VG",
            "VI",
            "VN",
            "VU",
            "WF",
            "WS",
            "YE",
            "YT",
            "ZA",
            "ZM",
            "ZW"
          ],
          "description": [
            "Two-letter ISO country code to be used as a hint for target region<br/><br/>",
            "NOTE: These are sample values, there are many",
            "<a href=\"http://www.iso.org/iso/country_codes.htm\">more</a>"
          ]
        },
        "identificationType": {
          "type": "string",
          "enum": [
            "BUSINESS_LICENSE",
            "DRIVERS_LICENSE",
            "ORGANIZATION_CODE_CERTIFICATE",
            "PASSPORT",
            "RESIDENT_ID",
            "RESIDENT_ID_TEMPORARY"
          ],
          "description": "Type of the identity document"
        },
        "identificationNumber": {
          "type": "string",
          "description": "Individual or business identification number written on the document. Must match image exactly"
        },
        "legalEntityName": {
          "type": "string",
          "description": "Individual or business name written on the document. Must match image exactly"
        },
        "contact": {
          "$ref": "Contact"
        }
      },
      "required": [
        "contact",
        "identificationCountry",
        "identificationNumber",
        "identificationType",
        "identityDocumentId",
        "legalEntityName"
      ]
    },
    "Consent": {
      "id": "Consent",
      "additionalProperties": false,
      "properties": {
        "agreementKeys": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Unique identifiers of the legal agreements to which the end-user has agreed, as returned from the/domains/agreements endpoint"
        },
        "agreedBy": {
          "type": "string",
          "description": "Originating client IP address of the end-user's computer when they consented to these legal agreements"
        },
        "agreedAt": {
          "type": "string",
          "format": "iso-datetime",
          "description": "Timestamp indicating when the end-user consented to these legal agreements"
        }
      },
      "required": [
        "agreementKeys",
        "agreedBy",
        "agreedAt"
      ]
    },
    "DomainAvailableResponse": {
      "id": "DomainAvailableResponse",
      "additionalProperties": false,
      "properties": {
        "domain": {
          "type": "string",
          "description": "Domain name"
        },
        "available": {
          "type": "boolean",
          "description": "Whether or not the domain name is available"
        },
        "definitive": {
          "type": "boolean",
          "description": "Whether or not the `available` answer has been definitively verified with the registry"
        },
        "price": {
          "type": "integer",
          "format": "currency-micro-unit",
          "description": "Price of the domain excluding taxes or fees. Only returned if tld is offered"
        },
        "currency": {
          "type": "string",
          "format": "iso-currency-code",
          "defaultValue": "USD",
          "pattern": "^[A-Z][A-Z][A-Z]$",
          "description": "Currency in which the `price` is listed. Only returned if tld is offered"
        },
        "period": {
          "type": "integer",
          "format": "integer-positive",
          "description": "Number of years included in the price. Only returned if tld is offered"
        }
      },
      "required": [
        "domain",
        "available",
        "definitive"
      ]
    },
    "DomainAvailableBulk": {
      "id": "DomainAvailableBulk",
      "additionalProperties": false,
      "properties": {
        "domains": {
          "type": "array",
          "items": {
            "$ref": "DomainAvailableResponse"
          },
          "description": "Domain available response array"
        }
      },
      "required": [
        "domains"
      ]
    },
    "DomainAvailableBulkMixed": {
      "id": "DomainAvailableBulkMixed",
      "additionalProperties": false,
      "properties": {
        "domains": {
          "type": "array",
          "items": {
            "$ref": "DomainAvailableResponse"
          },
          "description": "Domain available response array"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "DomainAvailableError"
          },
          "description": "Errors encountered while performing a domain available check"
        }
      },
      "required": [
        "domains"
      ]
    },
    "ErrorDomainContactsValidate": {
      "id": "ErrorDomainContactsValidate",
      "additionalProperties": false,
      "properties": {
        "code": {
          "type": "string",
          "format": "constant",
          "pattern": "^[A-Z_][A-Z0-9_]*$",
          "description": "Short identifier for the error, suitable for indicating the specific error within client code"
        },
        "message": {
          "type": "string",
          "description": "Human-readable, English description of the error"
        },
        "fields": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "ErrorFieldDomainContactsValidate"
          },
          "description": "List of the specific fields, and the errors found with their contents"
        },
        "stack": {
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "string"
          },
          "description": [
            "Stack trace indicating where the error occurred.<br/>",
            "NOTE: This attribute <strong>MAY</strong> be included for Development and Test environments.",
            "However, it <strong>MUST NOT</strong> be exposed from OTE nor Production systems"
          ]
        }
      },
      "required": [
        "code"
      ]
    },
    "ErrorFieldDomainContactsValidate": {
      "id": "ErrorFieldDomainContactsValidate",
      "additionalProperties": false,
      "properties": {
        "path": {
          "type": "string",
          "format": "json-path",
          "pattern": "^[a-z_]([a-zA-Z0-9_.]*)*$",
          "description": "1) JSONPath referring to the field within the data containing an error<br/>or<br/>2) JSONPath referring to an object containing an error"
        },
        "pathRelated": {
          "type": "string",
          "format": "json-path",
          "pattern": "^[a-z_]([a-zA-Z0-9_.]*)*$",
          "description": "JSONPath referring to the field on the object referenced by `path` containing an error"
        },
        "code": {
          "type": "string",
          "format": "constant",
          "pattern": "^[A-Z_][A-Z0-9_]*$",
          "description": "Short identifier for the error, suitable for indicating the specific error within client code"
        },
        "message": {
          "type": "string",
          "description": "Human-readable, English description of the problem with the contents of the field"
        },
        "domains": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": [
            "An array of domain names the error is for. If tlds are specified in the request, `domains` will contain tlds.",
            "For example, if `domains` in request is [\"test1.com\", \"test2.uk\", \"net\"], and the field is invalid for",
            "com and net, then one of the `fields` in response will have [\"test1.com\", \"net\"] as `domains`"
          ]
        }
      },
      "required": [
        "code",
        "domains",
        "path"
      ]
    },
    "DomainAvailableError": {
      "id": "DomainAvailableError",
      "additionalProperties": false,
      "properties": {
        "code": {
          "type": "string",
          "format": "constant",
          "pattern": "^[A-Z_][A-Z0-9_]*$",
          "description": "Short identifier for the error, suitable for indicating the specific error within client code"
        },
        "domain": {
          "type": "string",
          "description": "Domain name"
        },
        "message": {
          "type": "string",
          "description": "Human-readable, English description of the error"
        },
        "path": {
          "type": "string",
          "format": "json-path",
          "pattern": "^[a-z_]([a-zA-Z0-9_.]*)*$",
          "description": "<ul>\n<li style='margin-left: 12px;'>JSONPath referring to a field containing an error</li>\n<strong style='margin-left: 12px;'>OR</strong>\n<li style='margin-left: 12px;'>JSONPath referring to a field that refers to an object containing an error, with more detail in `pathRelated`</li>\n</ul>"
        },
        "status": {
          "type": "integer",
          "description": "HTTP status code that would return for a single check"
        }
      },
      "required": [
        "code",
        "domain",
        "path",
        "status"
      ]
    },
    "DomainDetail": {
      "id": "DomainDetail",
      "additionalProperties": false,
      "properties": {
        "domainId": {
          "type": "number",
          "format": "double",
          "description": "Unique identifier for this Domain"
        },
        "domain": {
          "type": "string",
          "description": "Name of the domain"
        },
        "status": {
          "type": "string",
          "description": "Processing status of the domain<br/><ul>\n<li><strong style='margin-left: 12px;'>ACTIVE</strong> - All is well</li>\n<li><strong style='margin-left: 12px;'>AWAITING*</strong> - System is waiting for the end-user to complete an action</li>\n<li><strong style='margin-left: 12px;'>CANCELLED*</strong> - Domain has been cancelled, and may or may not be reclaimable</li>\n<li><strong style='margin-left: 12px;'>CONFISCATED</strong> - Domain has been confiscated, usually for abuse, chargeback, or fraud</li>\n<li><strong style='margin-left: 12px;'>DISABLED*</strong> - Domain has been disabled</li>\n<li><strong style='margin-left: 12px;'>EXCLUDED*</strong> - Domain has been excluded from Firehose registration</li>\n<li><strong style='margin-left: 12px;'>EXPIRED*</strong> - Domain has expired</li>\n<li><strong style='margin-left: 12px;'>FAILED*</strong> - Domain has failed a required action, and the system is no longer retrying</li>\n<li><strong style='margin-left: 12px;'>HELD*</strong> - Domain has been placed on hold, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>LOCKED*</strong> - Domain has been locked, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>PARKED*</strong> - Domain has been parked, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>PENDING*</strong> - Domain is working its way through an automated workflow</li>\n<li><strong style='margin-left: 12px;'>RESERVED*</strong> - Domain is reserved, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>REVERTED</strong> - Domain has been reverted, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>SUSPENDED*</strong> - Domain has been suspended, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>TRANSFERRED*</strong> - Domain has been transferred out</li>\n<li><strong style='margin-left: 12px;'>UNKNOWN</strong> - Domain is in an unknown state</li>\n<li><strong style='margin-left: 12px;'>UNLOCKED*</strong> - Domain has been unlocked, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>UNPARKED*</strong> - Domain has been unparked, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>UPDATED*</strong> - Domain ownership has been transferred to another account</li>\n</ul>"
        },
        "expires": {
          "$ref": "datetime",
          "description": "Date and time when this domain will expire"
        },
        "expirationProtected": {
          "type": "boolean",
          "description": "Whether or not the domain is protected from expiration"
        },
        "holdRegistrar": {
          "type": "boolean",
          "description": "Whether or not the domain is on-hold by the registrar"
        },
        "locked": {
          "type": "boolean",
          "description": "Whether or not the domain is locked to prevent transfers"
        },
        "privacy": {
          "type": "boolean",
          "description": "Whether or not the domain has privacy protection"
        },
        "renewAuto": {
          "type": "boolean",
          "description": "Whether or not the domain is configured to automatically renew"
        },
        "renewDeadline": {
          "$ref": "datetime",
          "description": "Date the domain must renew on"
        },
        "transferProtected": {
          "type": "boolean",
          "description": "Whether or not the domain is protected from transfer"
        },
        "createdAt": {
          "$ref": "datetime",
          "description": "Date and time when this domain was created"
        },
        "deletedAt": {
          "$ref": "datetime",
          "description": "Date and time when this domain was deleted"
        },
        "authCode": {
          "type": "string",
          "description": "Authorization code for transferring the Domain"
        },
        "nameServers": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "host-name",
            "pattern": "([^.]+\\.)*[^.]+\\.[^.]+"
          },
          "description": "Fully-qualified domain names for DNS servers"
        },
        "contactRegistrant": {
          "$ref": "Contact",
          "description": "Registration contact for the domain"
        },
        "contactBilling": {
          "$ref": "Contact",
          "description": "Billing contact for the domain registration"
        },
        "contactAdmin": {
          "$ref": "Contact",
          "description": "Administrative contact for the domain registration"
        },
        "contactTech": {
          "$ref": "Contact",
          "description": "Technical contact for the domain registration"
        },
        "verifications": {
          "$ref": "VerificationsDomain",
          "description": "Progress and status for each of the verification processes requested for this domain"
        },
        "subaccountId": {
          "type": "string",
          "description": "Reseller subaccount shopperid who can manage the domain"
        }
      },
      "required": [
        "domainId",
        "domain",
        "status",
        "expirationProtected",
        "holdRegistrar",
        "locked",
        "privacy",
        "renewAuto",
        "renewDeadline",
        "transferProtected",
        "createdAt",
        "authCode",
        "nameServers",
        "contactRegistrant",
        "contactBilling",
        "contactAdmin",
        "contactTech"
      ]
    },
    "Contact": {
      "id": "Contact",
      "additionalProperties": false,
      "properties": {
        "nameFirst": {
          "type": "string",
          "format": "person-name",
          "maxLength": 30
        },
        "nameMiddle": {
          "type": "string"
        },
        "nameLast": {
          "type": "string",
          "format": "person-name",
          "maxLength": 30
        },
        "organization": {
          "type": "string",
          "format": "organization-name",
          "maxLength": 100
        },
        "jobTitle": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "email",
          "maxLength": 80
        },
        "phone": {
          "type": "string",
          "format": "phone",
          "maxLength": 17
        },
        "fax": {
          "type": "string",
          "format": "phone",
          "maxLength": 17
        },
        "addressMailing": {
          "$ref": "Address"
        }
      },
      "required": [
        "nameFirst",
        "nameLast",
        "email",
        "phone",
        "addressMailing"
      ]
    },
    "Address": {
      "id": "Address",
      "additionalProperties": false,
      "properties": {
        "address1": {
          "type": "string",
          "format": "street-address",
          "maxLength": 41
        },
        "address2": {
          "type": "string",
          "format": "street-address2",
          "maxLength": 41
        },
        "city": {
          "type": "string",
          "format": "city-name",
          "maxLength": 30
        },
        "state": {
          "type": "string",
          "format": "state-province-territory",
          "minLength": 2,
          "maxLength": 30,
          "description": "State or province or territory"
        },
        "postalCode": {
          "type": "string",
          "format": "postal-code",
          "minLength": 2,
          "maxLength": 10,
          "description": "Postal or zip code"
        },
        "country": {
          "type": "string",
          "format": "iso-country-code",
          "defaultValue": "US",
          "enum": [
            "AC",
            "AD",
            "AE",
            "AF",
            "AG",
            "AI",
            "AL",
            "AM",
            "AO",
            "AQ",
            "AR",
            "AS",
            "AT",
            "AU",
            "AW",
            "AX",
            "AZ",
            "BA",
            "BB",
            "BD",
            "BE",
            "BF",
            "BG",
            "BH",
            "BI",
            "BJ",
            "BM",
            "BN",
            "BO",
            "BQ",
            "BR",
            "BS",
            "BT",
            "BV",
            "BW",
            "BY",
            "BZ",
            "CA",
            "CC",
            "CD",
            "CF",
            "CG",
            "CH",
            "CI",
            "CK",
            "CL",
            "CM",
            "CN",
            "CO",
            "CR",
            "CV",
            "CW",
            "CX",
            "CY",
            "CZ",
            "DE",
            "DJ",
            "DK",
            "DM",
            "DO",
            "DZ",
            "EC",
            "EE",
            "EG",
            "EH",
            "ER",
            "ES",
            "ET",
            "FI",
            "FJ",
            "FK",
            "FM",
            "FO",
            "FR",
            "GA",
            "GB",
            "GD",
            "GE",
            "GF",
            "GG",
            "GH",
            "GI",
            "GL",
            "GM",
            "GN",
            "GP",
            "GQ",
            "GR",
            "GS",
            "GT",
            "GU",
            "GW",
            "GY",
            "HK",
            "HM",
            "HN",
            "HR",
            "HT",
            "HU",
            "ID",
            "IE",
            "IL",
            "IM",
            "IN",
            "IO",
            "IQ",
            "IS",
            "IT",
            "JE",
            "JM",
            "JO",
            "JP",
            "KE",
            "KG",
            "KH",
            "KI",
            "KM",
            "KN",
            "KR",
            "KV",
            "KW",
            "KY",
            "KZ",
            "LA",
            "LB",
            "LC",
            "LI",
            "LK",
            "LR",
            "LS",
            "LT",
            "LU",
            "LV",
            "LY",
            "MA",
            "MC",
            "MD",
            "ME",
            "MG",
            "MH",
            "MK",
            "ML",
            "MM",
            "MN",
            "MO",
            "MP",
            "MQ",
            "MR",
            "MS",
            "MT",
            "MU",
            "MV",
            "MW",
            "MX",
            "MY",
            "MZ",
            "NA",
            "NC",
            "NE",
            "NF",
            "NG",
            "NI",
            "NL",
            "NO",
            "NP",
            "NR",
            "NU",
            "NZ",
            "OM",
            "PA",
            "PE",
            "PF",
            "PG",
            "PH",
            "PK",
            "PL",
            "PM",
            "PN",
            "PR",
            "PS",
            "PT",
            "PW",
            "PY",
            "QA",
            "RE",
            "RO",
            "RS",
            "RU",
            "RW",
            "SA",
            "SB",
            "SC",
            "SE",
            "SG",
            "SH",
            "SI",
            "SJ",
            "SK",
            "SL",
            "SM",
            "SN",
            "SO",
            "SR",
            "ST",
            "SV",
            "SX",
            "SZ",
            "TC",
            "TD",
            "TF",
            "TG",
            "TH",
            "TJ",
            "TK",
            "TL",
            "TM",
            "TN",
            "TO",
            "TP",
            "TR",
            "TT",
            "TV",
            "TW",
            "TZ",
            "UA",
            "UG",
            "UM",
            "US",
            "UY",
            "UZ",
            "VA",
            "VC",
            "VE",
            "VG",
            "VI",
            "VN",
            "VU",
            "WF",
            "WS",
            "YE",
            "YT",
            "ZA",
            "ZM",
            "ZW"
          ],
          "description": "Two-letter ISO country code to be used as a hint for target region<br/><br/>\nNOTE: These are sample values, there are many\n<a href='http://www.iso.org/iso/country_codes.htm'>more</a>"
        }
      },
      "required": [
        "address1",
        "city",
        "state",
        "postalCode",
        "country"
      ]
    },
    "RealNameValidation": {
      "id": "RealNameValidation",
      "additionalProperties": false,
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "APPROVED",
            "PENDING",
            "PENDING_ASSOCIATION_WITH_DOMAIN",
            "PENDING_SUBMISSION_TO_VERIFICATION_SERVICE",
            "PENDING_VERIFICATION_SERVICE_REPLY",
            "PENDING_SUBMISSION_TO_REGISTRY",
            "PENDING_REGISTRY_REPLY",
            "PENDING_DOMAIN_UPDATE",
            "REJECTED"
          ]
        }
      },
      "required": []
    },
    "DomainSummary": {
      "id": "DomainSummary",
      "additionalProperties": false,
      "properties": {
        "domainId": {
          "type": "number",
          "format": "double",
          "description": "Unique identifier for this Domain"
        },
        "domain": {
          "type": "string",
          "description": "Name of the domain"
        },
        "status": {
          "type": "string",
          "description": "Processing status of the domain<br/><ul>\n<li><strong style='margin-left: 12px;'>ACTIVE</strong> - All is well</li>\n<li><strong style='margin-left: 12px;'>AWAITING*</strong> - System is waiting for the end-user to complete an action</li>\n<li><strong style='margin-left: 12px;'>CANCELLED*</strong> - Domain has been cancelled, and may or may not be reclaimable</li>\n<li><strong style='margin-left: 12px;'>CONFISCATED</strong> - Domain has been confiscated, usually for abuse, chargeback, or fraud</li>\n<li><strong style='margin-left: 12px;'>DISABLED*</strong> - Domain has been disabled</li>\n<li><strong style='margin-left: 12px;'>EXCLUDED*</strong> - Domain has been excluded from Firehose registration</li>\n<li><strong style='margin-left: 12px;'>EXPIRED*</strong> - Domain has expired</li>\n<li><strong style='margin-left: 12px;'>FAILED*</strong> - Domain has failed a required action, and the system is no longer retrying</li>\n<li><strong style='margin-left: 12px;'>HELD*</strong> - Domain has been placed on hold, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>LOCKED*</strong> - Domain has been locked, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>PARKED*</strong> - Domain has been parked, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>PENDING*</strong> - Domain is working its way through an automated workflow</li>\n<li><strong style='margin-left: 12px;'>RESERVED*</strong> - Domain is reserved, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>REVERTED</strong> - Domain has been reverted, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>SUSPENDED*</strong> - Domain has been suspended, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>TRANSFERRED*</strong> - Domain has been transferred out</li>\n<li><strong style='margin-left: 12px;'>UNKNOWN</strong> - Domain is in an unknown state</li>\n<li><strong style='margin-left: 12px;'>UNLOCKED*</strong> - Domain has been unlocked, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>UNPARKED*</strong> - Domain has been unparked, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>UPDATED*</strong> - Domain ownership has been transferred to another account</li>\n</ul>"
        },
        "expires": {
          "$ref": "datetime",
          "description": "Date and time when this domain will expire"
        },
        "expirationProtected": {
          "type": "boolean",
          "description": "Whether or not the domain is protected from expiration"
        },
        "holdRegistrar": {
          "type": "boolean",
          "description": "Whether or not the domain is on-hold by the registrar"
        },
        "locked": {
          "type": "boolean",
          "description": "Whether or not the domain is locked to prevent transfers"
        },
        "privacy": {
          "type": "boolean",
          "description": "Whether or not the domain has privacy protection"
        },
        "renewAuto": {
          "type": "boolean",
          "description": "Whether or not the domain is configured to automatically renew"
        },
        "renewable": {
          "type": "boolean",
          "description": "Whether or not the domain is eligble for renewal based on status"
        },
        "renewDeadline": {
          "$ref": "datetime",
          "description": "Date the domain must renew on"
        },
        "transferProtected": {
          "type": "boolean",
          "description": "Whether or not the domain is protected from transfer"
        },
        "createdAt": {
          "$ref": "datetime",
          "description": "Date and time when this domain was created"
        },
        "deletedAt": {
          "$ref": "datetime",
          "description": "Date and time when this domain was deleted"
        },
        "authCode": {
          "type": "string",
          "description": "Authorization code for transferring the Domain"
        },
        "nameServers": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "host-name",
            "pattern": "([^.]+\\.)*[^.]+\\.[^.]+"
          },
          "description": "Fully-qualified domain names for DNS servers"
        },
        "contactRegistrant": {
          "$ref": "Contact",
          "description": "Registration contact for the domain"
        },
        "contactBilling": {
          "$ref": "Contact",
          "description": "Billing contact for the domain registration"
        },
        "contactAdmin": {
          "$ref": "Contact",
          "description": "Administrative contact for the domain registration"
        },
        "contactTech": {
          "$ref": "Contact",
          "description": "Technical contact for the domain registration"
        }
      },
      "required": [
        "domainId",
        "domain",
        "status",
        "expirationProtected",
        "holdRegistrar",
        "locked",
        "privacy",
        "renewAuto",
        "renewDeadline",
        "transferProtected",
        "createdAt",
        "contactRegistrant"
      ]
    },
    "DomainContacts": {
      "id": "DomainContacts",
      "additionalProperties": false,
      "properties": {
        "contactRegistrant": {
          "$ref": "Contact"
        },
        "contactAdmin": {
          "$ref": "Contact"
        },
        "contactTech": {
          "$ref": "Contact"
        },
        "contactBilling": {
          "$ref": "Contact"
        }
      },
      "required": [
        "contactRegistrant"
      ]
    },
    "DomainsContactsBulk": {
      "id": "DomainsContactsBulk",
      "properties": {
        "domains": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "domain"
          },
          "minItems": 1,
          "description": [
            "An array of domain names to be validated against. Alternatively, you can specify the extracted tlds.",
            "However, full domain names are required if the tld is `uk`"
          ]
        },
        "entityType": {
          "type": "string",
          "description": "Canadian Presence Requirement (CA)",
          "enum": [
            "ABORIGINAL",
            "ASSOCIATION",
            "CITIZEN",
            "CORPORATION",
            "EDUCATIONAL",
            "GOVERNMENT",
            "HOSPITAL",
            "INDIAN_BAND",
            "LEGAL_REPRESENTATIVE",
            "LIBRARY_ARCHIVE_MUSEUM",
            "MARK_REGISTERED",
            "MARK_TRADE",
            "PARTNERSHIP",
            "POLITICAL_PARTY",
            "RESIDENT_PERMANENT",
            "TRUST",
            "UNION"
          ]
        },
        "contactRegistrant": {
          "$ref": "Contact"
        },
        "contactAdmin": {
          "$ref": "Contact"
        },
        "contactTech": {
          "$ref": "Contact"
        },
        "contactBilling": {
          "$ref": "Contact"
        },
        "contactPresence": {
          "$ref": "Contact"
        }
      },
      "required": [
        "domains"
      ]
    },
    "TldSummary": {
      "id": "TldSummary",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "format": "tld",
          "description": "Name of the top-level domain"
        },
        "type": {
          "type": "string",
          "defaultValue": "GENERIC",
          "enum": [
            "COUNTRY_CODE",
            "GENERIC"
          ],
          "description": "Type of the top-level domain"
        }
      },
      "required": [
        "name",
        "type"
      ]
    },
    "DomainPurchase": {
      "id": "DomainPurchase",
      "additionalProperties": false,
      "properties": {
        "domain": {
          "type": "string",
          "format": "domain",
          "pattern": "^[^.]{1,63}.[^.]{2,}$",
          "description": "For internationalized domain names with non-ascii characters, the domain name is converted to punycode before format and pattern validation rules are checked"
        },
        "consent": {
          "$ref": "Consent"
        },
        "period": {
          "type": "integer",
          "format": "integer-positive",
          "defaultValue": 1,
          "minimum": 1,
          "maximum": 10,
          "pattern": "[1]?[0-9]"
        },
        "nameServers": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "host-name",
            "pattern": "([^.]+\\.)*[^.]+\\.[^.]+"
          },
          "minItems": 0,
          "maxItems": 2
        },
        "renewAuto": {
          "type": "boolean",
          "defaultValue": true
        },
        "privacy": {
          "type": "boolean",
          "defaultValue": false
        },
        "contactRegistrant": {
          "$ref": "Contact"
        },
        "contactAdmin": {
          "$ref": "Contact"
        },
        "contactTech": {
          "$ref": "Contact"
        },
        "contactBilling": {
          "$ref": "Contact"
        }
      },
      "required": [
        "domain",
        "consent"
      ]
    },
    "DomainPurchaseResponse": {
      "id": "DomainPurchaseResponse",
      "additionalProperties": false,
      "properties": {
        "orderId": {
          "type": "integer",
          "format": "integer-positive",
          "description": "Unique identifier of the order processed to purchase the domain"
        },
        "itemCount": {
          "type": "integer",
          "format": "integer-positive",
          "description": "Number items included in the order"
        },
        "total": {
          "type": "integer",
          "format": "currency-micro-unit",
          "description": "Total cost of the domain and any selected add-ons"
        },
        "currency": {
          "type": "string",
          "format": "iso-currency-code",
          "defaultValue": "USD",
          "pattern": "^[A-Z][A-Z][A-Z]$",
          "description": "Currency in which the `total` is listed"
        }
      },
      "required": [
        "orderId",
        "itemCount",
        "total"
      ]
    },
    "DomainRenew": {
      "id": "DomainRenew",
      "additionalProperties": false,
      "properties": {
        "period": {
          "type": "integer",
          "format": "integer-positive",
          "minimum": 1,
          "maximum": 10,
          "pattern": "[1]?[0-9]",
          "description": "Number of years to extend the Domain. Must not exceed maximum for TLD. When omitted, defaults to `period` specified during original purchase"
        }
      },
      "required": []
    },
    "JsonSchema": {
      "id": "JsonSchema",
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string"
        },
        "properties": {
          "type": "object",
          "items": {
            "$ref": "JsonProperty"
          }
        },
        "required": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "models": {
          "type": "object",
          "items": {
            "$ref": " JsonSchema"
          }
        }
      },
      "required": [
        "id",
        "properties",
        "required",
        "models"
      ]
    },
    "JsonProperty": {
      "id": "JsonProperty",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "$ref": {
          "type": "string"
        },
        "items": {
          "type": "object",
          "items": {
            "$ref": "JsonDataType"
          }
        },
        "required": {
          "type": "boolean"
        },
        "maxItems": {
          "type": "integer"
        },
        "minItems": {
          "type": "integer"
        },
        "defaultValue": {
          "type": "string"
        },
        "format": {
          "type": "string"
        },
        "pattern": {
          "type": "string"
        },
        "maximum": {
          "type": "integer"
        },
        "minimum": {
          "type": "integer"
        }
      },
      "required": [
        "type",
        "$ref",
        "required"
      ]
    },
    "JsonDataType": {
      "id": "JsonDataType",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string"
        },
        "$ref": {
          "type": "string"
        },
        "format": {
          "type": "string"
        },
        "pattern": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "$ref"
      ]
    },
    "DomainTransferIn": {
      "id": "DomainTransferIn",
      "additionalProperties": false,
      "properties": {
        "authCode": {
          "type": "string",
          "description": "Authorization code from registrar for transferring a domain"
        },
        "period": {
          "type": "integer",
          "format": "integer-positive",
          "defaultValue": 1,
          "minimum": 1,
          "maximum": 10,
          "pattern": "[1]?[0-9]",
          "description": "Can be more than 1 but no more than 10 years total including current registration length"
        },
        "renewAuto": {
          "type": "boolean",
          "defaultValue": true,
          "description": "Whether or not the domain should be configured to automatically renew"
        },
        "privacy": {
          "type": "boolean",
          "defaultValue": false,
          "description": "Whether or not privacy has been requested"
        },
        "consent": {
          "$ref": "Consent",
          "description": "Required agreements can be retrieved via the GET ./domains/agreements endpoint"
        }
      },
      "required": [
        "authCode",
        "consent"
      ]
    },
    "PrivacyPurchase": {
      "id": "PrivacyPurchase",
      "additionalProperties": false,
      "properties": {
        "consent": {
          "$ref": "Consent",
          "description": "Specify agreement `DNPA`.  Required agreements can be retrieved via the GET ./domains/agreements endpoint"
        }
      },
      "required": [
        "consent"
      ]
    },
    "LegalAgreement": {
      "id": "LegalAgreement",
      "additionalProperties": false,
      "properties": {
        "agreementKey": {
          "type": "string",
          "description": "Unique identifier for the legal agreement"
        },
        "title": {
          "type": "string",
          "description": "Title of the legal agreement"
        },
        "url": {
          "type": "string",
          "format": "url",
          "description": "URL to a page containing the legal agreement"
        },
        "content": {
          "type": "string",
          "description": "Contents of the legal agreement, suitable for embedding"
        }
      },
      "required": [
        "agreementKey",
        "title",
        "content"
      ]
    },
    "DNSRecord": {
      "id": "DNSRecord",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "A",
            "AAAA",
            "CNAME",
            "MX",
            "NS",
            "SOA",
            "SRV",
            "TXT"
          ]
        },
        "name": {
          "type": "string",
          "format": "domain",
          "maxLength": 255
        },
        "data": {
          "type": "string",
          "maxLength": 255
        },
        "priority": {
          "type": "integer",
          "format": "integer-positive",
          "description": "Record priority (MX and SRV only)"
        },
        "ttl": {
          "type": "integer",
          "format": "integer-positive"
        },
        "service": {
          "type": "string",
          "description": "Service type (SRV only)"
        },
        "protocol": {
          "type": "string",
          "description": "Service protocol (SRV only)"
        },
        "port": {
          "type": "integer",
          "minimum": 1,
          "maximum": 65535,
          "description": "Service port (SRV only)"
        },
        "weight": {
          "type": "integer",
          "format": "integer-positive",
          "description": "Record weight (SRV only)"
        }
      },
      "required": [
        "type",
        "name",
        "data"
      ]
    },
    "DNSRecordCreateType": {
      "id": "DNSRecordCreateType",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "format": "domain",
          "maxLength": 255
        },
        "data": {
          "type": "string",
          "maxLength": 255
        },
        "priority": {
          "type": "integer",
          "format": "integer-positive",
          "description": "Record priority (MX and SRV only)"
        },
        "ttl": {
          "type": "integer",
          "format": "integer-positive"
        },
        "service": {
          "type": "string",
          "description": "Service type (SRV only)"
        },
        "protocol": {
          "type": "string",
          "description": "Service protocol (SRV only)"
        },
        "port": {
          "type": "integer",
          "minimum": 1,
          "maximum": 65535,
          "description": "Service port (SRV only)"
        },
        "weight": {
          "type": "integer",
          "format": "integer-positive",
          "description": "Record weight (SRV only)"
        }
      },
      "required": [
        "name",
        "data"
      ]
    },
    "DNSRecordCreateTypeName": {
      "id": "DNSRecordCreateTypeName",
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "string",
          "maxLength": 255
        },
        "priority": {
          "type": "integer",
          "format": "integer-positive",
          "description": "Record priority (MX and SRV only)"
        },
        "ttl": {
          "type": "integer",
          "format": "integer-positive"
        },
        "service": {
          "type": "string",
          "description": "Service type (SRV only)"
        },
        "protocol": {
          "type": "string",
          "description": "Service protocol (SRV only)"
        },
        "port": {
          "type": "integer",
          "minimum": 1,
          "maximum": 65535,
          "description": "Service port (SRV only)"
        },
        "weight": {
          "type": "integer",
          "format": "integer-positive",
          "description": "Record weight (SRV only)"
        }
      },
      "required": [
        "data"
      ]
    },
    "DomainSuggestion": {
      "id": "DomainSuggestion",
      "additionalProperties": false,
      "properties": {
        "domain": {
          "type": "string",
          "description": "Suggested domain name"
        }
      },
      "required": [
        "domain"
      ]
    },
    "VerificationsDomain": {
      "id": "VerificationsDomain",
      "additionalProperties": false,
      "properties": {
        "realName": {
          "$ref": "VerificationRealName",
          "description": "Verification of identity by comparing registration data against government issued documents"
        },
        "domainName": {
          "$ref": "VerificationDomainName",
          "description": "Verification of domain name against a prohibited list maintained by the government"
        }
      }
    },
    "VerificationRealName": {
      "id": "VerificationRealName",
      "additionalProperties": false,
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "APPROVED",
            "PENDING",
            "REJECTED_DOCUMENT_OUTDATED",
            "REJECTED_EXPIRED_BUSINESS_LICENSE",
            "REJECTED_EXPIRED_ORGANIZATION_CODE",
            "REJECTED_ILLEGIBLE_DOCUMENT_NAME",
            "REJECTED_ILLEGIBLE_IDENTIFICATION",
            "REJECTED_INCOMPLETE_IDENTIFICATION",
            "REJECTED_INCOMPLETE_REGISTRATION_LETTER",
            "REJECTED_INCONSISTENT_IDENTITY_CARD",
            "REJECTED_INCONSISTENT_ORGANIZATION_CODE",
            "REJECTED_INCONSISTENT_REGISTRANT_NAME",
            "REJECTED_INVALID_BUSINESS_LICENSE_OR_ORGANIZATION_CODE",
            "REJECTED_INVALID_DOCUMENT",
            "REJECTED_MISMATCH_BUSINESS_ID",
            "REJECTED_MISMATCH_BUSINESS_NAME",
            "REJECTED_MISMATCH_DOCUMENT_ID",
            "REJECTED_MISMATCH_DOCUMENT_NAME",
            "REJECTED_MISMATCH_DOCUMENT_TYPE",
            "REJECTED_MISMATCH_REGISTRANT_INFO",
            "REJECTED_MISMATCH_REGISTRANT_LOCALITY",
            "REJECTED_MISMATCH_REGISTRANT_NAME",
            "REJECTED_UNABLE_TO_OPEN",
            "REJECTED_UNABLE_TO_VERIFY",
            "REJECTED_UNKNOWN_ERROR",
            "UNABLE_TO_RETRIEVE_STATUS"
          ],
          "description": [
            "Status of the real name verification<br/><ul>",
            "<li><strong style='margin-left: 12px;'>APPROVED</strong> - All is well</li>",
            "<li><strong style='margin-left: 12px;'>PENDING</strong> - Real name verification is working its way through the workflow</li>",
            "<li><strong style='margin-left: 12px;'>REJECTED_DOCUMENT_OUTDATED</strong> - Local government verification shows there is a newer version of your document.  Upload the latest version of the document and retry real name verification</li>",
            "<li><strong style='margin-left: 12px;'>REJECTED_EXPIRED_BUSINESS_LICENSE</strong> - Business license is expired</li>",
            "<li><strong style='margin-left: 12px;'>REJECTED_EXPIRED_ORGANIZATION_CODE</strong> - Organization code certificate number has expired</li>",
            "<li><strong style='margin-left: 12px;'>REJECTED_ILLEGIBLE_DOCUMENT_NAME</strong> - There isn’t a clear name on your uploaded document, please upload a different document to retry real name verification</li>",
            "<li><strong style='margin-left: 12px;'>REJECTED_ILLEGIBLE_IDENTIFICATION</strong> - Registrant identification is not clear.  Upload a better image to retry</li>",
            "<li><strong style='margin-left: 12px;'>REJECTED_INCOMPLETE_IDENTIFICATION</strong> - Registrant identification is incomplete</li>",
            "<li><strong style='margin-left: 12px;'>REJECTED_INCOMPLETE_REGISTRATION_LETTER</strong> - Registration letter is incomplete</li>",
            "<li><strong style='margin-left: 12px;'>REJECTED_INCONSISTENT_IDENTITY_CARD</strong> - Provided identity card is inconsistent with the identity card on record</li>",
            "<li><strong style='margin-left: 12px;'>REJECTED_INCONSISTENT_ORGANIZATION_CODE</strong> - Provided organization information is inconsistent with the results obtained using the submitted organization code</li>",
            "<li><strong style='margin-left: 12px;'>REJECTED_INCONSISTENT_REGISTRANT_NAME</strong> - Name on the registrant identification does not match the name in the system</li>",
            "<li><strong style='margin-left: 12px;'>REJECTED_INVALID_BUSINESS_LICENSE_OR_ORGANIZATION_CODE</strong> - Your document contains an invalid business license or organization code certificate number</li>",
            "<li><strong style='margin-left: 12px;'>REJECTED_INVALID_DOCUMENT</strong> - Document is invalid.  Please upload another document to retry real name verification</li>",
            "<li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_BUSINESS_ID</strong> - Business id does not match the business id in the document</li>",
            "<li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_BUSINESS_NAME</strong> - Business name does not match the business name in the document</li>",
            "<li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_DOCUMENT_ID</strong> - Document id does not match the id in the document</li>",
            "<li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_DOCUMENT_NAME</strong> - Document name does not match the name in the document</li>",
            "<li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_DOCUMENT_TYPE</strong> - Document type does not match the document</li>",
            "<li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_REGISTRANT_INFO</strong> - The information provided for the registrant does not match the document</li>",
            "<li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_REGISTRANT_LOCALITY</strong> - Registrant region is overseas, but a local identity document was provided</li>",
            "<li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_REGISTRANT_NAME</strong> - Registrant name has been changed, so the request must be resubmitted</li>",
            "<li><strong style='margin-left: 12px;'>REJECTED_UNABLE_TO_OPEN</strong> - Registrant identification could not be opened.  Please upload the document again to retry real name verification</li>",
            "<li><strong style='margin-left: 12px;'>REJECTED_UNABLE_TO_VERIFY</strong> - Unable to initiate verification.  Please upload the document again to retry real name verification</li>",
            "<li><strong style='margin-left: 12px;'>REJECTED_UNKNOWN_ERROR</strong> - Document was rejected due to an unknown error. For more information, contact customer support</li>",
            "<li><strong style='margin-left: 12px;'>UNABLE_TO_RETRIEVE_STATUS</strong> - Unable to retrieve status for the real name verification process.  Retry, if this status persists, contact customer support</li>",
            "</ul>"
          ]
        }
      },
      "required": [
        "status"
      ]
    },
    "VerificationDomainName": {
      "id": "VerificationDomainName",
      "additionalProperties": false,
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "APPROVED",
            "PENDING",
            "REJECTED",
            "UNABLE_TO_RETRIEVE_STATUS"
          ],
          "description": "Status of the domain name verification"
        }
      },
      "required": [
        "status"
      ]
    },
    "IdentityDocumentVerification": {
      "id": "IdentityDocumentVerification",
      "additionalProperties": false,
      "properties": {
        "tld": {
          "type": "string",
          "description": "Top level domain the current identity document verification is for"
        },
        "status": {
          "type": "string",
          "enum": [
            "APPROVED",
            "REJECTED",
            "PENDING"
          ]
        },
        "createdAt": {
          "type": "string",
          "format": "iso-datetime",
          "description": "Timestamp indicating when the user created the identity document verification job"
        }
      },
      "required": [
        "createdAt",
        "status",
        "tld"
      ]
    }
  },
  "authorizations": {
    "sso_key": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}