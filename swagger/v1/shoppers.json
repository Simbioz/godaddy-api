{
  "apiVersion": "1.0.0",
  "swaggerVersion": "1.2",
  "basePath": "https://api.godaddy.com",
  "resourcePath": "/v1/shoppers",
  "apis": [
    {
      "path": "/v1/shoppers/{shopperId}",
      "operations": [
        {
          "method": "POST",
          "nickname": "update",
          "type": "ShopperId",
          "summary": "Update details for the specified Shopper",
          "parameters": [
            {
              "name": "shopperId",
              "required": true,
              "paramType": "path",
              "type": "string",
              "description": "The ID of the Shopper to update"
            },
            {
              "name": "shopper",
              "required": true,
              "paramType": "body",
              "type": "ShopperUpdate",
              "description": "The Shopper details to update"
            }
          ],
          "responseMessages": [
            {
              "code": 200,
              "message": "Request was successful",
              "responseModel": "ShopperId"
            },
            {
              "code": 400,
              "message": "Request was malformed",
              "responseModel": "Error"
            },
            {
              "code": 401,
              "message": "Authentication info not sent or invalid",
              "responseModel": "Error"
            },
            {
              "code": 403,
              "message": "Authenticated user is not allowed access",
              "responseModel": "Error"
            },
            {
              "code": 404,
              "message": "Resource not found",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "`Shopper` does not fulfill the schema",
              "responseModel": "Error"
            },
            {
              "code": 429,
              "message": "Too many requests received within interval",
              "responseModel": "ErrorLimit"
            },
            {
              "code": 500,
              "message": "Internal server error",
              "responseModel": "Error"
            }
          ],
          "consumes": [
            "application/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
          ],
          "authorizations": {
            "sso_key": []
          }
        },
        {
          "method": "GET",
          "nickname": "get",
          "type": "Shopper",
          "summary": "Get details for the specified Shopper",
          "parameters": [
            {
              "name": "shopperId",
              "required": true,
              "paramType": "path",
              "type": "string",
              "description": "Shopper whose details are to be retrieved"
            }
          ],
          "responseMessages": [
            {
              "code": 200,
              "message": "Request was successful",
              "responseModel": "Shopper"
            },
            {
              "code": 400,
              "message": "Request was malformed",
              "responseModel": "Error"
            },
            {
              "code": 401,
              "message": "Authentication info not sent or invalid",
              "responseModel": "Error"
            },
            {
              "code": 403,
              "message": "Authenticated user is not allowed access",
              "responseModel": "Error"
            },
            {
              "code": 404,
              "message": "Resource not found",
              "responseModel": "Error"
            },
            {
              "code": 429,
              "message": "Too many requests received within interval",
              "responseModel": "ErrorLimit"
            },
            {
              "code": 500,
              "message": "Internal server error",
              "responseModel": "Error"
            }
          ],
          "consumes": [
            "application/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
          ],
          "authorizations": {
            "sso_key": []
          }
        }
      ]
    },
    {
      "path": "/v1/shoppers/subaccount",
      "operations": [
        {
          "method": "POST",
          "nickname": "createSubaccount",
          "type": "ShopperId",
          "summary": "Create a Subaccount owned by the authenticated Reseller",
          "parameters": [
            {
              "name": "subaccount",
              "required": true,
              "paramType": "body",
              "type": "SubaccountCreate",
              "description": "The subaccount to create"
            }
          ],
          "responseMessages": [
            {
              "code": 200,
              "message": "Request was successful",
              "responseModel": "ShopperId"
            },
            {
              "code": 400,
              "message": "Request was malformed",
              "responseModel": "Error"
            },
            {
              "code": 401,
              "message": "Authentication info not sent or invalid",
              "responseModel": "Error"
            },
            {
              "code": 403,
              "message": "Authenticated user is not allowed access",
              "responseModel": "Error"
            },
            {
              "code": 422,
              "message": "`subaccount` does not fulfill the schema",
              "responseModel": "Error"
            },
            {
              "code": 429,
              "message": "Too many requests received within interval",
              "responseModel": "ErrorLimit"
            },
            {
              "code": 500,
              "message": "Internal server error",
              "responseModel": "Error"
            }
          ],
          "consumes": [
            "application/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
          ],
          "authorizations": {
            "sso_key": []
          }
        }
      ]
    }
  ],
  "consumes": [
    "application/json",
    "application/x-www-form-urlencoded",
    "application/xml",
    "text/xml"
  ],
  "produces": [
    "application/json",
    "application/xml",
    "text/xml",
    "application/javascript",
    "text/javascript"
  ],
  "models": {
    "Shopper": {
      "id": "Shopper",
      "additionalProperties": false,
      "properties": {
        "shopperId": {
          "type": "string"
        },
        "nameFirst": {
          "type": "string"
        },
        "nameLast": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "email"
        },
        "externalId": {
          "type": "integer"
        },
        "marketId": {
          "type": "string",
          "format": "bcp-47",
          "defaultValue": "en-US"
        }
      },
      "required": [
        "shopperId",
        "nameFirst",
        "nameLast",
        "email",
        "marketId"
      ]
    },
    "ShopperUpdate": {
      "id": "ShopperUpdate",
      "additionalProperties": false,
      "properties": {
        "nameFirst": {
          "type": "string"
        },
        "nameLast": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "email"
        },
        "externalId": {
          "type": "integer"
        },
        "marketId": {
          "type": "string",
          "format": "bcp-47"
        }
      },
      "required": []
    },
    "ShopperId": {
      "id": "ShopperId",
      "additionalProperties": false,
      "properties": {
        "shopperId": {
          "type": "string"
        },
        "customerId": {
          "type": "string",
          "description": "Identifier for the Customer record associated with this Shopper record. This is an alternate identifier that some systems use to identify an individual shopper record"
        }
      },
      "required": [
        "shopperId"
      ]
    },
    "Error": {
      "id": "Error",
      "additionalProperties": false,
      "properties": {
        "code": {
          "type": "string",
          "format": "constant",
          "pattern": "^[A-Z_][A-Z0-9_]*$",
          "description": "Short identifier for the error, suitable for indicating the specific error within client code"
        },
        "message": {
          "type": "string",
          "description": "Human-readable, English description of the error"
        },
        "fields": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "ErrorField"
          },
          "description": "List of the specific fields, and the errors found with their contents"
        }
      },
      "required": [
        "code"
      ]
    },
    "ErrorField": {
      "id": "ErrorField",
      "additionalProperties": false,
      "properties": {
        "path": {
          "type": "string",
          "format": "json-path",
          "pattern": "^[a-z_]([a-zA-Z0-9_.]*)*$",
          "description": "<ul>\n<li style='margin-left: 12px;'>JSONPath referring to a field containing an error</li>\n<strong style='margin-left: 12px;'>OR</strong>\n<li style='margin-left: 12px;'>JSONPath referring to a field that refers to an object containing an error, with more detail in `pathRelated`</li>\n</ul>"
        },
        "pathRelated": {
          "type": "string",
          "format": "json-path",
          "pattern": "^[a-z_]([a-zA-Z0-9_.]*)*$",
          "description": "JSONPath referring to a field containing an error, which is referenced by `path`"
        },
        "code": {
          "type": "string",
          "format": "constant",
          "pattern": "^[A-Z_][A-Z0-9_]*$",
          "description": "Short identifier for the error, suitable for indicating the specific error within client code"
        },
        "message": {
          "type": "string",
          "description": "Human-readable, English description of the problem with the contents of the field"
        }
      },
      "required": [
        "path",
        "code"
      ]
    },
    "ErrorLimit": {
      "id": "ErrorLimit",
      "additionalProperties": false,
      "properties": {
        "retryAfterSec": {
          "type": "integer",
          "format": "integer-positive",
          "description": "Number of seconds to wait before attempting a similar request"
        },
        "code": {
          "type": "string",
          "format": "constant",
          "pattern": "^[A-Z_][A-Z0-9_]*$",
          "description": "Short identifier for the error, suitable for indicating the specific error within client code"
        },
        "message": {
          "type": "string",
          "description": "Human-readable, English description of the error"
        },
        "fields": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "ErrorField"
          },
          "description": "List of the specific fields, and the errors found with their contents"
        }
      },
      "required": [
        "retryAfterSec",
        "code"
      ]
    },
    "SubaccountCreate": {
      "id": "SubaccountCreate",
      "additionalProperties": false,
      "properties": {
        "email": {
          "type": "string",
          "format": "email"
        },
        "password": {
          "type": "string",
          "format": "shopper-password"
        },
        "nameFirst": {
          "type": "string"
        },
        "nameLast": {
          "type": "string"
        },
        "externalId": {
          "type": "integer"
        },
        "marketId": {
          "type": "string",
          "format": "bcp-47",
          "defaultValue": "en-US"
        }
      },
      "required": [
        "email",
        "password",
        "nameFirst",
        "nameLast"
      ]
    }
  },
  "authorizations": {
    "sso_key": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}